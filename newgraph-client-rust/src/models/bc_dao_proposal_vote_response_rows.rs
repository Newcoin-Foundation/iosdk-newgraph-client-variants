/* 
 * newlife-creator-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-05-20T13:39:48Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcDaoProposalVoteResponseRows {
  #[serde(rename = "proposal_type")]
  proposal_type: Option<String>,
  #[serde(rename = "quantity")]
  quantity: Option<::models::BcListDaoProposalsResponseVoteNo>,
  #[serde(rename = "proposal_id")]
  proposal_id: Option<f32>,
  #[serde(rename = "dao_id")]
  dao_id: Option<f32>,
  #[serde(rename = "id")]
  id: Option<String>
}

impl BcDaoProposalVoteResponseRows {
  pub fn new() -> BcDaoProposalVoteResponseRows {
    BcDaoProposalVoteResponseRows {
      proposal_type: None,
      quantity: None,
      proposal_id: None,
      dao_id: None,
      id: None
    }
  }

  pub fn set_proposal_type(&mut self, proposal_type: String) {
    self.proposal_type = Some(proposal_type);
  }

  pub fn with_proposal_type(mut self, proposal_type: String) -> BcDaoProposalVoteResponseRows {
    self.proposal_type = Some(proposal_type);
    self
  }

  pub fn proposal_type(&self) -> Option<&String> {
    self.proposal_type.as_ref()
  }

  pub fn reset_proposal_type(&mut self) {
    self.proposal_type = None;
  }

  pub fn set_quantity(&mut self, quantity: ::models::BcListDaoProposalsResponseVoteNo) {
    self.quantity = Some(quantity);
  }

  pub fn with_quantity(mut self, quantity: ::models::BcListDaoProposalsResponseVoteNo) -> BcDaoProposalVoteResponseRows {
    self.quantity = Some(quantity);
    self
  }

  pub fn quantity(&self) -> Option<&::models::BcListDaoProposalsResponseVoteNo> {
    self.quantity.as_ref()
  }

  pub fn reset_quantity(&mut self) {
    self.quantity = None;
  }

  pub fn set_proposal_id(&mut self, proposal_id: f32) {
    self.proposal_id = Some(proposal_id);
  }

  pub fn with_proposal_id(mut self, proposal_id: f32) -> BcDaoProposalVoteResponseRows {
    self.proposal_id = Some(proposal_id);
    self
  }

  pub fn proposal_id(&self) -> Option<&f32> {
    self.proposal_id.as_ref()
  }

  pub fn reset_proposal_id(&mut self) {
    self.proposal_id = None;
  }

  pub fn set_dao_id(&mut self, dao_id: f32) {
    self.dao_id = Some(dao_id);
  }

  pub fn with_dao_id(mut self, dao_id: f32) -> BcDaoProposalVoteResponseRows {
    self.dao_id = Some(dao_id);
    self
  }

  pub fn dao_id(&self) -> Option<&f32> {
    self.dao_id.as_ref()
  }

  pub fn reset_dao_id(&mut self) {
    self.dao_id = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> BcDaoProposalVoteResponseRows {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

}



