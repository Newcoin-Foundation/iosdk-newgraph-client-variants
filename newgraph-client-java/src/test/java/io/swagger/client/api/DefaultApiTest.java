/*
 * newlife-creator-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-05-20T13:39:48Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.AnyResponse;
import io.swagger.client.model.BcAccCreateRequest;
import io.swagger.client.model.BcApproveDaoProposalRequest;
import io.swagger.client.model.BcAuthEthRequest;
import io.swagger.client.model.BcAuthEthResponse;
import io.swagger.client.model.BcCollectionCreateRequest;
import io.swagger.client.model.BcCreateDaoProposal;
import io.swagger.client.model.BcCreateDaoRequest;
import io.swagger.client.model.BcCreateDaoResponse;
import io.swagger.client.model.BcDaoProposalVoteRequest;
import io.swagger.client.model.BcDaoProposalVoteResponse;
import io.swagger.client.model.BcGetAccountInfo;
import io.swagger.client.model.BcGetInfoResp;
import io.swagger.client.model.BcGetPoolInfo;
import io.swagger.client.model.BcKeyPairCreateRequest;
import io.swagger.client.model.BcKeyPairCreateResponse;
import io.swagger.client.model.BcListDaoProposalsResponse;
import io.swagger.client.model.BcMintAssetRequest;
import io.swagger.client.model.BcPoolCreateRequest;
import io.swagger.client.model.BcStakeMainDAORequest;
import io.swagger.client.model.BcStakePoolRequest;
import io.swagger.client.model.BcTxResponse;
import io.swagger.client.model.CreativeSearchResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.MoodAttachRequest;
import io.swagger.client.model.MoodCreateRequest;
import io.swagger.client.model.MoodCreateResponse;
import io.swagger.client.model.MoodListAttachedPostsResponse;
import io.swagger.client.model.MoodPagedListReadPublicResponse;
import io.swagger.client.model.MoodReadResponse;
import io.swagger.client.model.MoodUpdateRequest;
import io.swagger.client.model.OkResponse;
import io.swagger.client.model.PagedRatedResponsePost;
import io.swagger.client.model.PagedRatedResponseUser;
import io.swagger.client.model.PaymentStripePaymentIntentCreateRequest;
import io.swagger.client.model.PaymentStripePaymentIntentCreateResponse;
import io.swagger.client.model.PaymentStripeWebhookRequest;
import io.swagger.client.model.PostCreateRequest;
import io.swagger.client.model.PostCreateResponse;
import io.swagger.client.model.PostPagedListReadPublicResponse;
import io.swagger.client.model.PostReadResponse;
import io.swagger.client.model.PostTagsSearchPublicResponse;
import io.swagger.client.model.PostUpdateRequest;
import io.swagger.client.model.RatingUpdateRequest;
import io.swagger.client.model.RatingUpdateResponse;
import io.swagger.client.model.ReportUpdateRequest;
import io.swagger.client.model.ReportUpdateResponse;
import io.swagger.client.model.SyncContactsRequest;
import io.swagger.client.model.SyncContactsResponse;
import io.swagger.client.model.Undefined;
import io.swagger.client.model.UploadRequest;
import io.swagger.client.model.UploadRequestGeneric;
import io.swagger.client.model.UploadResponse;
import io.swagger.client.model.UserAvailabilityResponse;
import io.swagger.client.model.UserCreateRequest;
import io.swagger.client.model.UserDeleteRequest;
import io.swagger.client.model.UserInviteRequest;
import io.swagger.client.model.UserPagedListReadPublicResponse;
import io.swagger.client.model.UserPreRegisterRequest;
import io.swagger.client.model.UserReadPrivateResponse;
import io.swagger.client.model.UserReadPublicResponse;
import io.swagger.client.model.UserStakeRequest;
import io.swagger.client.model.UserUpdateRequest;
import io.swagger.client.model.UserUploadRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void authCallbackPathGetTest() throws Exception {
        String path = null;
        api.authCallbackPathGet(path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void authCallbackPathOptionsTest() throws Exception {
        String path = null;
        api.authCallbackPathOptions(path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void authProviderPathGetTest() throws Exception {
        String path = null;
        api.authProviderPathGet(path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void authProviderPathOptionsTest() throws Exception {
        String path = null;
        api.authProviderPathOptions(path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bcmaindaodldunstakeOptionsTest() throws Exception {
        api.bcmaindaodldunstakeOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bcmaindaodldunstakePostTest() throws Exception {
        BcStakeMainDAORequest bcStakeMainDAORequest = null;
        BcTxResponse response = api.bcmaindaodldunstakePost(bcStakeMainDAORequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bcmaindaoinstunstakeOptionsTest() throws Exception {
        api.bcmaindaoinstunstakeOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bcmaindaoinstunstakePostTest() throws Exception {
        BcStakePoolRequest bcStakePoolRequest = null;
        BcTxResponse response = api.bcmaindaoinstunstakePost(bcStakePoolRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bcmaindaostakeOptionsTest() throws Exception {
        api.bcmaindaostakeOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bcmaindaostakePostTest() throws Exception {
        BcStakeMainDAORequest bcStakeMainDAORequest = null;
        BcTxResponse response = api.bcmaindaostakePost(bcStakeMainDAORequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void folderGetTest() throws Exception {
        String id = null;
        MoodReadResponse response = api.folderGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void folderOptionsTest() throws Exception {
        api.folderOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void infoAuthGetTest() throws Exception {
        api.infoAuthGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void infoAuthOptionsTest() throws Exception {
        api.infoAuthOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void infoGetTest() throws Exception {
        api.infoGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void infoOptionsTest() throws Exception {
        api.infoOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodAttachPostOptionsTest() throws Exception {
        api.moodAttachPostOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodAttachPostPutTest() throws Exception {
        MoodAttachRequest moodAttachRequest = null;
        PostReadResponse response = api.moodAttachPostPut(moodAttachRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodGetTest() throws Exception {
        String id = null;
        MoodReadResponse response = api.moodGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodListTopGetTest() throws Exception {
        String direction = null;
        String contentType = null;
        String page = null;
        String orderBy = null;
        MoodPagedListReadPublicResponse response = api.moodListTopGet(direction, contentType, page, orderBy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodListTopOptionsTest() throws Exception {
        api.moodListTopOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodOptionsTest() throws Exception {
        api.moodOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodPostTest() throws Exception {
        MoodCreateRequest moodCreateRequest = null;
        MoodCreateResponse response = api.moodPost(moodCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodPostsGetTest() throws Exception {
        String id = null;
        String page = null;
        MoodListAttachedPostsResponse response = api.moodPostsGet(id, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodPostsOptionsTest() throws Exception {
        api.moodPostsOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodPutTest() throws Exception {
        MoodUpdateRequest moodUpdateRequest = null;
        MoodReadResponse response = api.moodPut(moodUpdateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodRateOptionsTest() throws Exception {
        api.moodRateOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodRatePostTest() throws Exception {
        RatingUpdateRequest ratingUpdateRequest = null;
        RatingUpdateResponse response = api.moodRatePost(ratingUpdateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodUploadOptionsTest() throws Exception {
        api.moodUploadOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moodUploadPostTest() throws Exception {
        UploadRequestGeneric uploadRequestGeneric = null;
        UploadResponse response = api.moodUploadPost(uploadRequestGeneric);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcaccopenOptionsTest() throws Exception {
        api.newcoinBcaccopenOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcaccopenPostTest() throws Exception {
        BcAccCreateRequest bcAccCreateRequest = null;
        BcTxResponse response = api.newcoinBcaccopenPost(bcAccCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcauthethOptionsTest() throws Exception {
        api.newcoinBcauthethOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcauthethPostTest() throws Exception {
        BcAuthEthRequest bcAuthEthRequest = null;
        BcAuthEthResponse response = api.newcoinBcauthethPost(bcAuthEthRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBccolcreateOptionsTest() throws Exception {
        api.newcoinBccolcreateOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBccolcreatePostTest() throws Exception {
        BcCollectionCreateRequest bcCollectionCreateRequest = null;
        BcTxResponse response = api.newcoinBccolcreatePost(bcCollectionCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcgetaccOptionsTest() throws Exception {
        api.newcoinBcgetaccOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcgetaccPostTest() throws Exception {
        BcGetAccountInfo bcGetAccountInfo = null;
        BcGetInfoResp response = api.newcoinBcgetaccPost(bcGetAccountInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcgetpoolOptionsTest() throws Exception {
        api.newcoinBcgetpoolOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcgetpoolPostTest() throws Exception {
        BcGetPoolInfo bcGetPoolInfo = null;
        BcGetInfoResp response = api.newcoinBcgetpoolPost(bcGetPoolInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBckeypairOptionsTest() throws Exception {
        api.newcoinBckeypairOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBckeypairPostTest() throws Exception {
        BcKeyPairCreateRequest bcKeyPairCreateRequest = null;
        BcKeyPairCreateResponse response = api.newcoinBckeypairPost(bcKeyPairCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcmintassetOptionsTest() throws Exception {
        api.newcoinBcmintassetOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcmintassetPostTest() throws Exception {
        BcMintAssetRequest bcMintAssetRequest = null;
        BcTxResponse response = api.newcoinBcmintassetPost(bcMintAssetRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcpoolcreateOptionsTest() throws Exception {
        api.newcoinBcpoolcreateOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcpoolcreatePostTest() throws Exception {
        BcPoolCreateRequest bcPoolCreateRequest = null;
        BcTxResponse response = api.newcoinBcpoolcreatePost(bcPoolCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcpoolstakeOptionsTest() throws Exception {
        api.newcoinBcpoolstakeOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinBcpoolstakePostTest() throws Exception {
        BcStakePoolRequest bcStakePoolRequest = null;
        BcTxResponse response = api.newcoinBcpoolstakePost(bcStakePoolRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoCreateOptionsTest() throws Exception {
        api.newcoinDaoCreateOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoCreatePostTest() throws Exception {
        BcCreateDaoRequest bcCreateDaoRequest = null;
        BcCreateDaoResponse response = api.newcoinDaoCreatePost(bcCreateDaoRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalApproveOptionsTest() throws Exception {
        api.newcoinDaoProposalApproveOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalApprovePostTest() throws Exception {
        BcApproveDaoProposalRequest bcApproveDaoProposalRequest = null;
        api.newcoinDaoProposalApprovePost(bcApproveDaoProposalRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalListGetTest() throws Exception {
        String proposalAuthor = null;
        String daoOwner = null;
        String daoId = null;
        String id = null;
        BcListDaoProposalsResponse response = api.newcoinDaoProposalListGet(proposalAuthor, daoOwner, daoId, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalListOptionsTest() throws Exception {
        api.newcoinDaoProposalListOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalOptionsTest() throws Exception {
        api.newcoinDaoProposalOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalPostTest() throws Exception {
        BcCreateDaoProposal bcCreateDaoProposal = null;
        api.newcoinDaoProposalPost(bcCreateDaoProposal);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalVoteOptionsTest() throws Exception {
        api.newcoinDaoProposalVoteOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalVotePostTest() throws Exception {
        BcDaoProposalVoteRequest bcDaoProposalVoteRequest = null;
        BcListDaoProposalsResponse response = api.newcoinDaoProposalVotePost(bcDaoProposalVoteRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalVotesGetTest() throws Exception {
        String voter = null;
        String voteId = null;
        BcDaoProposalVoteResponse response = api.newcoinDaoProposalVotesGet(voter, voteId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newcoinDaoProposalVotesOptionsTest() throws Exception {
        api.newcoinDaoProposalVotesOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void paymentStripeIntentOptionsTest() throws Exception {
        api.paymentStripeIntentOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void paymentStripeIntentPostTest() throws Exception {
        PaymentStripePaymentIntentCreateRequest paymentStripePaymentIntentCreateRequest = null;
        PaymentStripePaymentIntentCreateResponse response = api.paymentStripeIntentPost(paymentStripePaymentIntentCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void paymentStripeSubscriptionPaymentOptionsTest() throws Exception {
        api.paymentStripeSubscriptionPaymentOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void paymentStripeSubscriptionPaymentPostTest() throws Exception {
        api.paymentStripeSubscriptionPaymentPost();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void paymentStripeWebhookOptionsTest() throws Exception {
        api.paymentStripeWebhookOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void paymentStripeWebhookPostTest() throws Exception {
        PaymentStripeWebhookRequest paymentStripeWebhookRequest = null;
        api.paymentStripeWebhookPost(paymentStripeWebhookRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postGetTest() throws Exception {
        String id = null;
        PostReadResponse response = api.postGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postListSearchGetTest() throws Exception {
        String direction = null;
        String contentType = null;
        String page = null;
        String orderBy = null;
        String q = null;
        PostPagedListReadPublicResponse response = api.postListSearchGet(direction, contentType, page, orderBy, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postListSearchOptionsTest() throws Exception {
        api.postListSearchOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postListTagsSearchGetTest() throws Exception {
        String direction = null;
        String contentType = null;
        String page = null;
        String orderBy = null;
        String q = null;
        PostTagsSearchPublicResponse response = api.postListTagsSearchGet(direction, contentType, page, orderBy, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postListTagsSearchOptionsTest() throws Exception {
        api.postListTagsSearchOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postListTopGetTest() throws Exception {
        String direction = null;
        String contentType = null;
        String page = null;
        String orderBy = null;
        PostPagedListReadPublicResponse response = api.postListTopGet(direction, contentType, page, orderBy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postListTopOptionsTest() throws Exception {
        api.postListTopOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOptionsTest() throws Exception {
        api.postOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPostTest() throws Exception {
        PostCreateRequest postCreateRequest = null;
        PostCreateResponse response = api.postPost(postCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPutTest() throws Exception {
        PostUpdateRequest postUpdateRequest = null;
        PostReadResponse response = api.postPut(postUpdateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postRateOptionsTest() throws Exception {
        api.postRateOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postRatePostTest() throws Exception {
        RatingUpdateRequest ratingUpdateRequest = null;
        RatingUpdateResponse response = api.postRatePost(ratingUpdateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postReportOptionsTest() throws Exception {
        api.postReportOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postReportPostTest() throws Exception {
        ReportUpdateRequest reportUpdateRequest = null;
        ReportUpdateResponse response = api.postReportPost(reportUpdateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postUploadOptionsTest() throws Exception {
        api.postUploadOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postUploadPostTest() throws Exception {
        UploadRequestGeneric uploadRequestGeneric = null;
        UploadResponse response = api.postUploadPost(uploadRequestGeneric);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchCreativeGetTest() throws Exception {
        String aesthetics = null;
        String tags = null;
        String page = null;
        CreativeSearchResponse response = api.searchCreativeGet(aesthetics, tags, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchCreativeOptionsTest() throws Exception {
        api.searchCreativeOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void uploadNodeOptionsTest() throws Exception {
        api.uploadNodeOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void uploadNodePostTest() throws Exception {
        UploadRequest uploadRequest = null;
        UploadResponse response = api.uploadNodePost(uploadRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userActivityStreamGetTest() throws Exception {
        String after = null;
        String limit = null;
        AnyResponse response = api.userActivityStreamGet(after, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userActivityStreamOptionsTest() throws Exception {
        api.userActivityStreamOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userAvailabilityGetTest() throws Exception {
        String username = null;
        UserAvailabilityResponse response = api.userAvailabilityGet(username);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userAvailabilityOptionsTest() throws Exception {
        api.userAvailabilityOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userCurrentGetTest() throws Exception {
        UserReadPrivateResponse response = api.userCurrentGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userCurrentOptionsTest() throws Exception {
        api.userCurrentOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userDeleteTest() throws Exception {
        UserDeleteRequest userDeleteRequest = null;
        OkResponse response = api.userDelete(userDeleteRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userGetTest() throws Exception {
        String username = null;
        String id = null;
        UserReadPublicResponse response = api.userGet(username, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userInviteOptionsTest() throws Exception {
        api.userInviteOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userInvitePostTest() throws Exception {
        UserInviteRequest userInviteRequest = null;
        OkResponse response = api.userInvitePost(userInviteRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userListSearchGetTest() throws Exception {
        String direction = null;
        String contentType = null;
        String page = null;
        String orderBy = null;
        String q = null;
        UserPagedListReadPublicResponse response = api.userListSearchGet(direction, contentType, page, orderBy, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userListSearchOptionsTest() throws Exception {
        api.userListSearchOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userListTopGetTest() throws Exception {
        String direction = null;
        String contentType = null;
        String page = null;
        String orderBy = null;
        UserPagedListReadPublicResponse response = api.userListTopGet(direction, contentType, page, orderBy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userListTopOptionsTest() throws Exception {
        api.userListTopOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userMoodsGetTest() throws Exception {
        String id = null;
        String page = null;
        MoodPagedListReadPublicResponse response = api.userMoodsGet(id, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userMoodsOptionsTest() throws Exception {
        api.userMoodsOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userOptionsTest() throws Exception {
        api.userOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userPostTest() throws Exception {
        UserCreateRequest userCreateRequest = null;
        UserReadPrivateResponse response = api.userPost(userCreateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userPreregisterOptionsTest() throws Exception {
        api.userPreregisterOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userPreregisterPostTest() throws Exception {
        UserPreRegisterRequest userPreRegisterRequest = null;
        UserReadPrivateResponse response = api.userPreregisterPost(userPreRegisterRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userPutTest() throws Exception {
        UserUpdateRequest userUpdateRequest = null;
        UserReadPrivateResponse response = api.userPut(userUpdateRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userRatedInGetTest() throws Exception {
        String id = null;
        String page = null;
        PagedRatedResponseUser response = api.userRatedInGet(id, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userRatedInOptionsTest() throws Exception {
        api.userRatedInOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userRatedOutPostsGetTest() throws Exception {
        String id = null;
        String page = null;
        PagedRatedResponsePost response = api.userRatedOutPostsGet(id, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userRatedOutPostsOptionsTest() throws Exception {
        api.userRatedOutPostsOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userRatedOutUsersGetTest() throws Exception {
        String id = null;
        String page = null;
        PagedRatedResponseUser response = api.userRatedOutUsersGet(id, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userRatedOutUsersOptionsTest() throws Exception {
        api.userRatedOutUsersOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userStakeOptionsTest() throws Exception {
        api.userStakeOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userStakePostTest() throws Exception {
        UserStakeRequest userStakeRequest = null;
        AnyResponse response = api.userStakePost(userStakeRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userSyncContactsOptionsTest() throws Exception {
        api.userSyncContactsOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userSyncContactsPostTest() throws Exception {
        SyncContactsRequest syncContactsRequest = null;
        SyncContactsResponse response = api.userSyncContactsPost(syncContactsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userUploadOptionsTest() throws Exception {
        api.userUploadOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userUploadPostTest() throws Exception {
        UserUploadRequest userUploadRequest = null;
        UploadResponse response = api.userUploadPost(userUploadRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userUserRateOptionsTest() throws Exception {
        api.userUserRateOptions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userUserRatePostTest() throws Exception {
        RatingUpdateRequest ratingUpdateRequest = null;
        RatingUpdateResponse response = api.userUserRatePost(ratingUpdateRequest);

        // TODO: test validations
    }
    
}
