/**
 * newlife-creator-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-06-09T06:13:03Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PagedRatedResponsePost_author.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PagedRatedResponsePost_author::PagedRatedResponsePost_author()
{
    m_Powered = 0.0;
    m_PoweredIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_NewcoinAccTx = utility::conversions::to_string_t("");
    m_NewcoinAccTxIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Tumblr = utility::conversions::to_string_t("");
    m_TumblrIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_NewcoinPoolId = utility::conversions::to_string_t("");
    m_NewcoinPoolIdIsSet = false;
    m_AspectRatio = 0.0;
    m_AspectRatioIsSet = false;
    m_Instagram = utility::conversions::to_string_t("");
    m_InstagramIsSet = false;
    m_Soundcloud = utility::conversions::to_string_t("");
    m_SoundcloudIsSet = false;
    m_NewcoinActivePublicKey = utility::conversions::to_string_t("");
    m_NewcoinActivePublicKeyIsSet = false;
    m_NewcoinPublicKey = utility::conversions::to_string_t("");
    m_NewcoinPublicKeyIsSet = false;
    m_Powering = 0.0;
    m_PoweringIsSet = false;
    m_Twitter = utility::conversions::to_string_t("");
    m_TwitterIsSet = false;
    m_NewcoinOwnerPublicKey = utility::conversions::to_string_t("");
    m_NewcoinOwnerPublicKeyIsSet = false;
    m_Tiktok = utility::conversions::to_string_t("");
    m_TiktokIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_NewcoinPoolStake = 0.0;
    m_NewcoinPoolStakeIsSet = false;
    m_ContentType = utility::conversions::to_string_t("");
    m_ContentTypeIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
    m_NewcoinPublisherPublicKey = utility::conversions::to_string_t("");
    m_NewcoinPublisherPublicKeyIsSet = false;
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_Created = utility::conversions::to_string_t("");
    m_CreatedIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_NewcoinPoolTx = utility::conversions::to_string_t("");
    m_NewcoinPoolTxIsSet = false;
    m_License = utility::conversions::to_string_t("");
    m_LicenseIsSet = false;
    m_ContentUrl = utility::conversions::to_string_t("");
    m_ContentUrlIsSet = false;
    m_BlurHash = utility::conversions::to_string_t("");
    m_BlurHashIsSet = false;
    m_ConsentEmail = utility::conversions::to_string_t("");
    m_ConsentEmailIsSet = false;
    m_Updated = utility::conversions::to_string_t("");
    m_UpdatedIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
}

PagedRatedResponsePost_author::~PagedRatedResponsePost_author()
{
}

void PagedRatedResponsePost_author::validate()
{
    // TODO: implement validation
}

web::json::value PagedRatedResponsePost_author::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PoweredIsSet)
    {
        val[utility::conversions::to_string_t("powered")] = ModelBase::toJson(m_Powered);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_NewcoinAccTxIsSet)
    {
        val[utility::conversions::to_string_t("newcoinAccTx")] = ModelBase::toJson(m_NewcoinAccTx);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_TumblrIsSet)
    {
        val[utility::conversions::to_string_t("tumblr")] = ModelBase::toJson(m_Tumblr);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_NewcoinPoolIdIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPoolId")] = ModelBase::toJson(m_NewcoinPoolId);
    }
    if(m_AspectRatioIsSet)
    {
        val[utility::conversions::to_string_t("aspectRatio")] = ModelBase::toJson(m_AspectRatio);
    }
    if(m_InstagramIsSet)
    {
        val[utility::conversions::to_string_t("instagram")] = ModelBase::toJson(m_Instagram);
    }
    if(m_SoundcloudIsSet)
    {
        val[utility::conversions::to_string_t("soundcloud")] = ModelBase::toJson(m_Soundcloud);
    }
    if(m_NewcoinActivePublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinActivePublicKey")] = ModelBase::toJson(m_NewcoinActivePublicKey);
    }
    if(m_NewcoinPublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPublicKey")] = ModelBase::toJson(m_NewcoinPublicKey);
    }
    if(m_PoweringIsSet)
    {
        val[utility::conversions::to_string_t("powering")] = ModelBase::toJson(m_Powering);
    }
    if(m_TwitterIsSet)
    {
        val[utility::conversions::to_string_t("twitter")] = ModelBase::toJson(m_Twitter);
    }
    if(m_NewcoinOwnerPublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinOwnerPublicKey")] = ModelBase::toJson(m_NewcoinOwnerPublicKey);
    }
    if(m_TiktokIsSet)
    {
        val[utility::conversions::to_string_t("tiktok")] = ModelBase::toJson(m_Tiktok);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NewcoinPoolStakeIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPoolStake")] = ModelBase::toJson(m_NewcoinPoolStake);
    }
    if(m_ContentTypeIsSet)
    {
        val[utility::conversions::to_string_t("contentType")] = ModelBase::toJson(m_ContentType);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }
    if(m_NewcoinPublisherPublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPublisherPublicKey")] = ModelBase::toJson(m_NewcoinPublisherPublicKey);
    }
    if(m_WebsiteIsSet)
    {
        val[utility::conversions::to_string_t("website")] = ModelBase::toJson(m_Website);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_NewcoinPoolTxIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPoolTx")] = ModelBase::toJson(m_NewcoinPoolTx);
    }
    if(m_LicenseIsSet)
    {
        val[utility::conversions::to_string_t("license")] = ModelBase::toJson(m_License);
    }
    if(m_ContentUrlIsSet)
    {
        val[utility::conversions::to_string_t("contentUrl")] = ModelBase::toJson(m_ContentUrl);
    }
    if(m_BlurHashIsSet)
    {
        val[utility::conversions::to_string_t("blurHash")] = ModelBase::toJson(m_BlurHash);
    }
    if(m_ConsentEmailIsSet)
    {
        val[utility::conversions::to_string_t("consentEmail")] = ModelBase::toJson(m_ConsentEmail);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void PagedRatedResponsePost_author::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("powered")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("powered")];
        if(!fieldValue.is_null())
        {
            setPowered(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("displayName")];
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinAccTx")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinAccTx")];
        if(!fieldValue.is_null())
        {
            setNewcoinAccTx(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tumblr")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tumblr")];
        if(!fieldValue.is_null())
        {
            setTumblr(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("description")];
        if(!fieldValue.is_null())
        {
            setDescription(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPoolId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPoolId")];
        if(!fieldValue.is_null())
        {
            setNewcoinPoolId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("aspectRatio")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("aspectRatio")];
        if(!fieldValue.is_null())
        {
            setAspectRatio(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instagram")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("instagram")];
        if(!fieldValue.is_null())
        {
            setInstagram(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("soundcloud")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("soundcloud")];
        if(!fieldValue.is_null())
        {
            setSoundcloud(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinActivePublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinActivePublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinActivePublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinPublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("powering")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("powering")];
        if(!fieldValue.is_null())
        {
            setPowering(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("twitter")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("twitter")];
        if(!fieldValue.is_null())
        {
            setTwitter(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinOwnerPublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinOwnerPublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinOwnerPublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tiktok")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tiktok")];
        if(!fieldValue.is_null())
        {
            setTiktok(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPoolStake")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPoolStake")];
        if(!fieldValue.is_null())
        {
            setNewcoinPoolStake(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contentType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contentType")];
        if(!fieldValue.is_null())
        {
            setContentType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPublisherPublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPublisherPublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinPublisherPublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("website")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("website")];
        if(!fieldValue.is_null())
        {
            setWebsite(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fullName")];
        if(!fieldValue.is_null())
        {
            setFullName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPoolTx")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPoolTx")];
        if(!fieldValue.is_null())
        {
            setNewcoinPoolTx(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("license")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("license")];
        if(!fieldValue.is_null())
        {
            setLicense(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contentUrl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contentUrl")];
        if(!fieldValue.is_null())
        {
            setContentUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blurHash")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("blurHash")];
        if(!fieldValue.is_null())
        {
            setBlurHash(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentEmail")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentEmail")];
        if(!fieldValue.is_null())
        {
            setConsentEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated")];
        if(!fieldValue.is_null())
        {
            setUpdated(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("username")];
        if(!fieldValue.is_null())
        {
            setUsername(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void PagedRatedResponsePost_author::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PoweredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("powered"), m_Powered));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
        
    }
    if(m_NewcoinAccTxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinAccTx"), m_NewcoinAccTx));
        
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_TumblrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tumblr"), m_Tumblr));
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
        
    }
    if(m_NewcoinPoolIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPoolId"), m_NewcoinPoolId));
        
    }
    if(m_AspectRatioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("aspectRatio"), m_AspectRatio));
    }
    if(m_InstagramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instagram"), m_Instagram));
        
    }
    if(m_SoundcloudIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("soundcloud"), m_Soundcloud));
        
    }
    if(m_NewcoinActivePublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinActivePublicKey"), m_NewcoinActivePublicKey));
        
    }
    if(m_NewcoinPublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPublicKey"), m_NewcoinPublicKey));
        
    }
    if(m_PoweringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("powering"), m_Powering));
    }
    if(m_TwitterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("twitter"), m_Twitter));
        
    }
    if(m_NewcoinOwnerPublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinOwnerPublicKey"), m_NewcoinOwnerPublicKey));
        
    }
    if(m_TiktokIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tiktok"), m_Tiktok));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
    if(m_NewcoinPoolStakeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPoolStake"), m_NewcoinPoolStake));
    }
    if(m_ContentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contentType"), m_ContentType));
        
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
    if(m_NewcoinPublisherPublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPublisherPublicKey"), m_NewcoinPublisherPublicKey));
        
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("website"), m_Website));
        
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
        
    }
    if(m_NewcoinPoolTxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPoolTx"), m_NewcoinPoolTx));
        
    }
    if(m_LicenseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("license"), m_License));
        
    }
    if(m_ContentUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contentUrl"), m_ContentUrl));
        
    }
    if(m_BlurHashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blurHash"), m_BlurHash));
        
    }
    if(m_ConsentEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentEmail"), m_ConsentEmail));
        
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
        
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
        
    }
}

void PagedRatedResponsePost_author::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("powered")))
    {
        setPowered(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("powered"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinAccTx")))
    {
        setNewcoinAccTx(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinAccTx"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tumblr")))
    {
        setTumblr(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tumblr"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPoolId")))
    {
        setNewcoinPoolId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPoolId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("aspectRatio")))
    {
        setAspectRatio(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("aspectRatio"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instagram")))
    {
        setInstagram(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("instagram"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("soundcloud")))
    {
        setSoundcloud(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("soundcloud"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinActivePublicKey")))
    {
        setNewcoinActivePublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinActivePublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPublicKey")))
    {
        setNewcoinPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("powering")))
    {
        setPowering(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("powering"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("twitter")))
    {
        setTwitter(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("twitter"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinOwnerPublicKey")))
    {
        setNewcoinOwnerPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinOwnerPublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tiktok")))
    {
        setTiktok(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tiktok"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPoolStake")))
    {
        setNewcoinPoolStake(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPoolStake"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contentType")))
    {
        setContentType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contentType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPublisherPublicKey")))
    {
        setNewcoinPublisherPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPublisherPublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("website")))
    {
        setWebsite(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("website"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPoolTx")))
    {
        setNewcoinPoolTx(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPoolTx"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("license")))
    {
        setLicense(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("license"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contentUrl")))
    {
        setContentUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contentUrl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blurHash")))
    {
        setBlurHash(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("blurHash"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentEmail")))
    {
        setConsentEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentEmail"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated")))
    {
        setUpdated(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    }
}

double PagedRatedResponsePost_author::getPowered() const
{
    return m_Powered;
}


void PagedRatedResponsePost_author::setPowered(double value)
{
    m_Powered = value;
    m_PoweredIsSet = true;
}
bool PagedRatedResponsePost_author::poweredIsSet() const
{
    return m_PoweredIsSet;
}

void PagedRatedResponsePost_author::unsetPowered()
{
    m_PoweredIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getDisplayName() const
{
    return m_DisplayName;
}


void PagedRatedResponsePost_author::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool PagedRatedResponsePost_author::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void PagedRatedResponsePost_author::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getNewcoinAccTx() const
{
    return m_NewcoinAccTx;
}


void PagedRatedResponsePost_author::setNewcoinAccTx(utility::string_t value)
{
    m_NewcoinAccTx = value;
    m_NewcoinAccTxIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinAccTxIsSet() const
{
    return m_NewcoinAccTxIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinAccTx()
{
    m_NewcoinAccTxIsSet = false;
}

double PagedRatedResponsePost_author::getLatitude() const
{
    return m_Latitude;
}


void PagedRatedResponsePost_author::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool PagedRatedResponsePost_author::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void PagedRatedResponsePost_author::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getTumblr() const
{
    return m_Tumblr;
}


void PagedRatedResponsePost_author::setTumblr(utility::string_t value)
{
    m_Tumblr = value;
    m_TumblrIsSet = true;
}
bool PagedRatedResponsePost_author::tumblrIsSet() const
{
    return m_TumblrIsSet;
}

void PagedRatedResponsePost_author::unsetTumblr()
{
    m_TumblrIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getDescription() const
{
    return m_Description;
}


void PagedRatedResponsePost_author::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool PagedRatedResponsePost_author::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void PagedRatedResponsePost_author::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getNewcoinPoolId() const
{
    return m_NewcoinPoolId;
}


void PagedRatedResponsePost_author::setNewcoinPoolId(utility::string_t value)
{
    m_NewcoinPoolId = value;
    m_NewcoinPoolIdIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinPoolIdIsSet() const
{
    return m_NewcoinPoolIdIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinPoolId()
{
    m_NewcoinPoolIdIsSet = false;
}

double PagedRatedResponsePost_author::getAspectRatio() const
{
    return m_AspectRatio;
}


void PagedRatedResponsePost_author::setAspectRatio(double value)
{
    m_AspectRatio = value;
    m_AspectRatioIsSet = true;
}
bool PagedRatedResponsePost_author::aspectRatioIsSet() const
{
    return m_AspectRatioIsSet;
}

void PagedRatedResponsePost_author::unsetAspectRatio()
{
    m_AspectRatioIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getInstagram() const
{
    return m_Instagram;
}


void PagedRatedResponsePost_author::setInstagram(utility::string_t value)
{
    m_Instagram = value;
    m_InstagramIsSet = true;
}
bool PagedRatedResponsePost_author::instagramIsSet() const
{
    return m_InstagramIsSet;
}

void PagedRatedResponsePost_author::unsetInstagram()
{
    m_InstagramIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getSoundcloud() const
{
    return m_Soundcloud;
}


void PagedRatedResponsePost_author::setSoundcloud(utility::string_t value)
{
    m_Soundcloud = value;
    m_SoundcloudIsSet = true;
}
bool PagedRatedResponsePost_author::soundcloudIsSet() const
{
    return m_SoundcloudIsSet;
}

void PagedRatedResponsePost_author::unsetSoundcloud()
{
    m_SoundcloudIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getNewcoinActivePublicKey() const
{
    return m_NewcoinActivePublicKey;
}


void PagedRatedResponsePost_author::setNewcoinActivePublicKey(utility::string_t value)
{
    m_NewcoinActivePublicKey = value;
    m_NewcoinActivePublicKeyIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinActivePublicKeyIsSet() const
{
    return m_NewcoinActivePublicKeyIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinActivePublicKey()
{
    m_NewcoinActivePublicKeyIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getNewcoinPublicKey() const
{
    return m_NewcoinPublicKey;
}


void PagedRatedResponsePost_author::setNewcoinPublicKey(utility::string_t value)
{
    m_NewcoinPublicKey = value;
    m_NewcoinPublicKeyIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinPublicKeyIsSet() const
{
    return m_NewcoinPublicKeyIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinPublicKey()
{
    m_NewcoinPublicKeyIsSet = false;
}

double PagedRatedResponsePost_author::getPowering() const
{
    return m_Powering;
}


void PagedRatedResponsePost_author::setPowering(double value)
{
    m_Powering = value;
    m_PoweringIsSet = true;
}
bool PagedRatedResponsePost_author::poweringIsSet() const
{
    return m_PoweringIsSet;
}

void PagedRatedResponsePost_author::unsetPowering()
{
    m_PoweringIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getTwitter() const
{
    return m_Twitter;
}


void PagedRatedResponsePost_author::setTwitter(utility::string_t value)
{
    m_Twitter = value;
    m_TwitterIsSet = true;
}
bool PagedRatedResponsePost_author::twitterIsSet() const
{
    return m_TwitterIsSet;
}

void PagedRatedResponsePost_author::unsetTwitter()
{
    m_TwitterIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getNewcoinOwnerPublicKey() const
{
    return m_NewcoinOwnerPublicKey;
}


void PagedRatedResponsePost_author::setNewcoinOwnerPublicKey(utility::string_t value)
{
    m_NewcoinOwnerPublicKey = value;
    m_NewcoinOwnerPublicKeyIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinOwnerPublicKeyIsSet() const
{
    return m_NewcoinOwnerPublicKeyIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinOwnerPublicKey()
{
    m_NewcoinOwnerPublicKeyIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getTiktok() const
{
    return m_Tiktok;
}


void PagedRatedResponsePost_author::setTiktok(utility::string_t value)
{
    m_Tiktok = value;
    m_TiktokIsSet = true;
}
bool PagedRatedResponsePost_author::tiktokIsSet() const
{
    return m_TiktokIsSet;
}

void PagedRatedResponsePost_author::unsetTiktok()
{
    m_TiktokIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getId() const
{
    return m_Id;
}


void PagedRatedResponsePost_author::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PagedRatedResponsePost_author::idIsSet() const
{
    return m_IdIsSet;
}

void PagedRatedResponsePost_author::unsetId()
{
    m_IdIsSet = false;
}

double PagedRatedResponsePost_author::getNewcoinPoolStake() const
{
    return m_NewcoinPoolStake;
}


void PagedRatedResponsePost_author::setNewcoinPoolStake(double value)
{
    m_NewcoinPoolStake = value;
    m_NewcoinPoolStakeIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinPoolStakeIsSet() const
{
    return m_NewcoinPoolStakeIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinPoolStake()
{
    m_NewcoinPoolStakeIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getContentType() const
{
    return m_ContentType;
}


void PagedRatedResponsePost_author::setContentType(utility::string_t value)
{
    m_ContentType = value;
    m_ContentTypeIsSet = true;
}
bool PagedRatedResponsePost_author::contentTypeIsSet() const
{
    return m_ContentTypeIsSet;
}

void PagedRatedResponsePost_author::unsetContentType()
{
    m_ContentTypeIsSet = false;
}

double PagedRatedResponsePost_author::getLongitude() const
{
    return m_Longitude;
}


void PagedRatedResponsePost_author::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool PagedRatedResponsePost_author::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void PagedRatedResponsePost_author::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getNewcoinPublisherPublicKey() const
{
    return m_NewcoinPublisherPublicKey;
}


void PagedRatedResponsePost_author::setNewcoinPublisherPublicKey(utility::string_t value)
{
    m_NewcoinPublisherPublicKey = value;
    m_NewcoinPublisherPublicKeyIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinPublisherPublicKeyIsSet() const
{
    return m_NewcoinPublisherPublicKeyIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinPublisherPublicKey()
{
    m_NewcoinPublisherPublicKeyIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getWebsite() const
{
    return m_Website;
}


void PagedRatedResponsePost_author::setWebsite(utility::string_t value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}
bool PagedRatedResponsePost_author::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void PagedRatedResponsePost_author::unsetWebsite()
{
    m_WebsiteIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getCreated() const
{
    return m_Created;
}


void PagedRatedResponsePost_author::setCreated(utility::string_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool PagedRatedResponsePost_author::createdIsSet() const
{
    return m_CreatedIsSet;
}

void PagedRatedResponsePost_author::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getFullName() const
{
    return m_FullName;
}


void PagedRatedResponsePost_author::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool PagedRatedResponsePost_author::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void PagedRatedResponsePost_author::unsetFullName()
{
    m_FullNameIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getNewcoinPoolTx() const
{
    return m_NewcoinPoolTx;
}


void PagedRatedResponsePost_author::setNewcoinPoolTx(utility::string_t value)
{
    m_NewcoinPoolTx = value;
    m_NewcoinPoolTxIsSet = true;
}
bool PagedRatedResponsePost_author::newcoinPoolTxIsSet() const
{
    return m_NewcoinPoolTxIsSet;
}

void PagedRatedResponsePost_author::unsetNewcoinPoolTx()
{
    m_NewcoinPoolTxIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getLicense() const
{
    return m_License;
}


void PagedRatedResponsePost_author::setLicense(utility::string_t value)
{
    m_License = value;
    m_LicenseIsSet = true;
}
bool PagedRatedResponsePost_author::licenseIsSet() const
{
    return m_LicenseIsSet;
}

void PagedRatedResponsePost_author::unsetLicense()
{
    m_LicenseIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getContentUrl() const
{
    return m_ContentUrl;
}


void PagedRatedResponsePost_author::setContentUrl(utility::string_t value)
{
    m_ContentUrl = value;
    m_ContentUrlIsSet = true;
}
bool PagedRatedResponsePost_author::contentUrlIsSet() const
{
    return m_ContentUrlIsSet;
}

void PagedRatedResponsePost_author::unsetContentUrl()
{
    m_ContentUrlIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getBlurHash() const
{
    return m_BlurHash;
}


void PagedRatedResponsePost_author::setBlurHash(utility::string_t value)
{
    m_BlurHash = value;
    m_BlurHashIsSet = true;
}
bool PagedRatedResponsePost_author::blurHashIsSet() const
{
    return m_BlurHashIsSet;
}

void PagedRatedResponsePost_author::unsetBlurHash()
{
    m_BlurHashIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getConsentEmail() const
{
    return m_ConsentEmail;
}


void PagedRatedResponsePost_author::setConsentEmail(utility::string_t value)
{
    m_ConsentEmail = value;
    m_ConsentEmailIsSet = true;
}
bool PagedRatedResponsePost_author::consentEmailIsSet() const
{
    return m_ConsentEmailIsSet;
}

void PagedRatedResponsePost_author::unsetConsentEmail()
{
    m_ConsentEmailIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getUpdated() const
{
    return m_Updated;
}


void PagedRatedResponsePost_author::setUpdated(utility::string_t value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool PagedRatedResponsePost_author::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void PagedRatedResponsePost_author::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

utility::string_t PagedRatedResponsePost_author::getUsername() const
{
    return m_Username;
}


void PagedRatedResponsePost_author::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool PagedRatedResponsePost_author::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void PagedRatedResponsePost_author::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

