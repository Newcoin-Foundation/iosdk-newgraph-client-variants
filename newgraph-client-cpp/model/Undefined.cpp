/**
 * newlife-creator-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-05-20T13:39:48Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Undefined.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Undefined::Undefined()
{
    m_ErrorMessage = utility::conversions::to_string_t("");
    m_ErrorMessageIsSet = false;
    m_ErrorCode = utility::conversions::to_string_t("");
    m_ErrorCodeIsSet = false;
    m_StatusCode = 0.0;
    m_StatusCodeIsSet = false;
}

Undefined::~Undefined()
{
}

void Undefined::validate()
{
    // TODO: implement validation
}

web::json::value Undefined::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ErrorMessageIsSet)
    {
        val[utility::conversions::to_string_t("errorMessage")] = ModelBase::toJson(m_ErrorMessage);
    }
    if(m_ErrorCodeIsSet)
    {
        val[utility::conversions::to_string_t("errorCode")] = ModelBase::toJson(m_ErrorCode);
    }
    if(m_StatusCodeIsSet)
    {
        val[utility::conversions::to_string_t("statusCode")] = ModelBase::toJson(m_StatusCode);
    }

    return val;
}

void Undefined::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("errorMessage")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("errorMessage")];
        if(!fieldValue.is_null())
        {
            setErrorMessage(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("errorCode")];
        if(!fieldValue.is_null())
        {
            setErrorCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("statusCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("statusCode")];
        if(!fieldValue.is_null())
        {
            setStatusCode(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void Undefined::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
        
    }
    if(m_ErrorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorCode"), m_ErrorCode));
        
    }
    if(m_StatusCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("statusCode"), m_StatusCode));
    }
}

void Undefined::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        setErrorMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorCode")))
    {
        setErrorCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("statusCode")))
    {
        setStatusCode(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("statusCode"))));
    }
}

utility::string_t Undefined::getErrorMessage() const
{
    return m_ErrorMessage;
}


void Undefined::setErrorMessage(utility::string_t value)
{
    m_ErrorMessage = value;
    m_ErrorMessageIsSet = true;
}
bool Undefined::errorMessageIsSet() const
{
    return m_ErrorMessageIsSet;
}

void Undefined::unsetErrorMessage()
{
    m_ErrorMessageIsSet = false;
}

utility::string_t Undefined::getErrorCode() const
{
    return m_ErrorCode;
}


void Undefined::setErrorCode(utility::string_t value)
{
    m_ErrorCode = value;
    m_ErrorCodeIsSet = true;
}
bool Undefined::errorCodeIsSet() const
{
    return m_ErrorCodeIsSet;
}

void Undefined::unsetErrorCode()
{
    m_ErrorCodeIsSet = false;
}

double Undefined::getStatusCode() const
{
    return m_StatusCode;
}


void Undefined::setStatusCode(double value)
{
    m_StatusCode = value;
    m_StatusCodeIsSet = true;
}
bool Undefined::statusCodeIsSet() const
{
    return m_StatusCodeIsSet;
}

void Undefined::unsetStatusCode()
{
    m_StatusCodeIsSet = false;
}

}
}
}
}

