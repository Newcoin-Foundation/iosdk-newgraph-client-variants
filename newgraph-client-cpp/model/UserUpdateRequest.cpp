/**
 * newlife-creator-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-05-20T13:39:48Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserUpdateRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserUpdateRequest::UserUpdateRequest()
{
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_ConsentPrivacyPolicy = utility::conversions::to_string_t("");
    m_ConsentPrivacyPolicyIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_NewcoinCreateAccount = utility::conversions::to_string_t("");
    m_NewcoinCreateAccountIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Tumblr = utility::conversions::to_string_t("");
    m_TumblrIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Instagram = utility::conversions::to_string_t("");
    m_InstagramIsSet = false;
    m_Soundcloud = utility::conversions::to_string_t("");
    m_SoundcloudIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_Twitter = utility::conversions::to_string_t("");
    m_TwitterIsSet = false;
    m_Tiktok = utility::conversions::to_string_t("");
    m_TiktokIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_ConsentEmail = utility::conversions::to_string_t("");
    m_ConsentEmailIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

UserUpdateRequest::~UserUpdateRequest()
{
}

void UserUpdateRequest::validate()
{
    // TODO: implement validation
}

web::json::value UserUpdateRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_WebsiteIsSet)
    {
        val[utility::conversions::to_string_t("website")] = ModelBase::toJson(m_Website);
    }
    if(m_ConsentPrivacyPolicyIsSet)
    {
        val[utility::conversions::to_string_t("consentPrivacyPolicy")] = ModelBase::toJson(m_ConsentPrivacyPolicy);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_NewcoinCreateAccountIsSet)
    {
        val[utility::conversions::to_string_t("newcoinCreateAccount")] = ModelBase::toJson(m_NewcoinCreateAccount);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_TumblrIsSet)
    {
        val[utility::conversions::to_string_t("tumblr")] = ModelBase::toJson(m_Tumblr);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_InstagramIsSet)
    {
        val[utility::conversions::to_string_t("instagram")] = ModelBase::toJson(m_Instagram);
    }
    if(m_SoundcloudIsSet)
    {
        val[utility::conversions::to_string_t("soundcloud")] = ModelBase::toJson(m_Soundcloud);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_TwitterIsSet)
    {
        val[utility::conversions::to_string_t("twitter")] = ModelBase::toJson(m_Twitter);
    }
    if(m_TiktokIsSet)
    {
        val[utility::conversions::to_string_t("tiktok")] = ModelBase::toJson(m_Tiktok);
    }
    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    if(m_ConsentEmailIsSet)
    {
        val[utility::conversions::to_string_t("consentEmail")] = ModelBase::toJson(m_ConsentEmail);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void UserUpdateRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("website")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("website")];
        if(!fieldValue.is_null())
        {
            setWebsite(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentPrivacyPolicy")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentPrivacyPolicy")];
        if(!fieldValue.is_null())
        {
            setConsentPrivacyPolicy(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("displayName")];
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinCreateAccount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinCreateAccount")];
        if(!fieldValue.is_null())
        {
            setNewcoinCreateAccount(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fullName")];
        if(!fieldValue.is_null())
        {
            setFullName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tumblr")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tumblr")];
        if(!fieldValue.is_null())
        {
            setTumblr(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("description")];
        if(!fieldValue.is_null())
        {
            setDescription(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instagram")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("instagram")];
        if(!fieldValue.is_null())
        {
            setInstagram(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("soundcloud")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("soundcloud")];
        if(!fieldValue.is_null())
        {
            setSoundcloud(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("twitter")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("twitter")];
        if(!fieldValue.is_null())
        {
            setTwitter(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tiktok")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tiktok")];
        if(!fieldValue.is_null())
        {
            setTiktok(ModelBase::stringFromJson(fieldValue));
        }
    }
    setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    if(val.has_field(utility::conversions::to_string_t("consentEmail")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentEmail")];
        if(!fieldValue.is_null())
        {
            setConsentEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void UserUpdateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
        
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("website"), m_Website));
        
    }
    if(m_ConsentPrivacyPolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentPrivacyPolicy"), m_ConsentPrivacyPolicy));
        
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
        
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_NewcoinCreateAccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinCreateAccount"), m_NewcoinCreateAccount));
        
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
        
    }
    if(m_TumblrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tumblr"), m_Tumblr));
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
        
    }
    if(m_InstagramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instagram"), m_Instagram));
        
    }
    if(m_SoundcloudIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("soundcloud"), m_Soundcloud));
        
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
        
    }
    if(m_TwitterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("twitter"), m_Twitter));
        
    }
    if(m_TiktokIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tiktok"), m_Tiktok));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    if(m_ConsentEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentEmail"), m_ConsentEmail));
        
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
}

void UserUpdateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("website")))
    {
        setWebsite(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("website"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentPrivacyPolicy")))
    {
        setConsentPrivacyPolicy(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentPrivacyPolicy"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinCreateAccount")))
    {
        setNewcoinCreateAccount(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinCreateAccount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tumblr")))
    {
        setTumblr(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tumblr"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instagram")))
    {
        setInstagram(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("instagram"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("soundcloud")))
    {
        setSoundcloud(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("soundcloud"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("twitter")))
    {
        setTwitter(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("twitter"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tiktok")))
    {
        setTiktok(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tiktok"))));
    }
    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    if(multipart->hasContent(utility::conversions::to_string_t("consentEmail")))
    {
        setConsentEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentEmail"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude"))));
    }
}

utility::string_t UserUpdateRequest::getLastName() const
{
    return m_LastName;
}


void UserUpdateRequest::setLastName(utility::string_t value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool UserUpdateRequest::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void UserUpdateRequest::unsetLastName()
{
    m_LastNameIsSet = false;
}

utility::string_t UserUpdateRequest::getWebsite() const
{
    return m_Website;
}


void UserUpdateRequest::setWebsite(utility::string_t value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}
bool UserUpdateRequest::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void UserUpdateRequest::unsetWebsite()
{
    m_WebsiteIsSet = false;
}

utility::string_t UserUpdateRequest::getConsentPrivacyPolicy() const
{
    return m_ConsentPrivacyPolicy;
}


void UserUpdateRequest::setConsentPrivacyPolicy(utility::string_t value)
{
    m_ConsentPrivacyPolicy = value;
    m_ConsentPrivacyPolicyIsSet = true;
}
bool UserUpdateRequest::consentPrivacyPolicyIsSet() const
{
    return m_ConsentPrivacyPolicyIsSet;
}

void UserUpdateRequest::unsetConsentPrivacyPolicy()
{
    m_ConsentPrivacyPolicyIsSet = false;
}

utility::string_t UserUpdateRequest::getDisplayName() const
{
    return m_DisplayName;
}


void UserUpdateRequest::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool UserUpdateRequest::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void UserUpdateRequest::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

double UserUpdateRequest::getLatitude() const
{
    return m_Latitude;
}


void UserUpdateRequest::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool UserUpdateRequest::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void UserUpdateRequest::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

utility::string_t UserUpdateRequest::getNewcoinCreateAccount() const
{
    return m_NewcoinCreateAccount;
}


void UserUpdateRequest::setNewcoinCreateAccount(utility::string_t value)
{
    m_NewcoinCreateAccount = value;
    m_NewcoinCreateAccountIsSet = true;
}
bool UserUpdateRequest::newcoinCreateAccountIsSet() const
{
    return m_NewcoinCreateAccountIsSet;
}

void UserUpdateRequest::unsetNewcoinCreateAccount()
{
    m_NewcoinCreateAccountIsSet = false;
}

utility::string_t UserUpdateRequest::getFullName() const
{
    return m_FullName;
}


void UserUpdateRequest::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool UserUpdateRequest::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void UserUpdateRequest::unsetFullName()
{
    m_FullNameIsSet = false;
}

utility::string_t UserUpdateRequest::getTumblr() const
{
    return m_Tumblr;
}


void UserUpdateRequest::setTumblr(utility::string_t value)
{
    m_Tumblr = value;
    m_TumblrIsSet = true;
}
bool UserUpdateRequest::tumblrIsSet() const
{
    return m_TumblrIsSet;
}

void UserUpdateRequest::unsetTumblr()
{
    m_TumblrIsSet = false;
}

utility::string_t UserUpdateRequest::getDescription() const
{
    return m_Description;
}


void UserUpdateRequest::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool UserUpdateRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UserUpdateRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t UserUpdateRequest::getInstagram() const
{
    return m_Instagram;
}


void UserUpdateRequest::setInstagram(utility::string_t value)
{
    m_Instagram = value;
    m_InstagramIsSet = true;
}
bool UserUpdateRequest::instagramIsSet() const
{
    return m_InstagramIsSet;
}

void UserUpdateRequest::unsetInstagram()
{
    m_InstagramIsSet = false;
}

utility::string_t UserUpdateRequest::getSoundcloud() const
{
    return m_Soundcloud;
}


void UserUpdateRequest::setSoundcloud(utility::string_t value)
{
    m_Soundcloud = value;
    m_SoundcloudIsSet = true;
}
bool UserUpdateRequest::soundcloudIsSet() const
{
    return m_SoundcloudIsSet;
}

void UserUpdateRequest::unsetSoundcloud()
{
    m_SoundcloudIsSet = false;
}

utility::string_t UserUpdateRequest::getFirstName() const
{
    return m_FirstName;
}


void UserUpdateRequest::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool UserUpdateRequest::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void UserUpdateRequest::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

utility::string_t UserUpdateRequest::getTwitter() const
{
    return m_Twitter;
}


void UserUpdateRequest::setTwitter(utility::string_t value)
{
    m_Twitter = value;
    m_TwitterIsSet = true;
}
bool UserUpdateRequest::twitterIsSet() const
{
    return m_TwitterIsSet;
}

void UserUpdateRequest::unsetTwitter()
{
    m_TwitterIsSet = false;
}

utility::string_t UserUpdateRequest::getTiktok() const
{
    return m_Tiktok;
}


void UserUpdateRequest::setTiktok(utility::string_t value)
{
    m_Tiktok = value;
    m_TiktokIsSet = true;
}
bool UserUpdateRequest::tiktokIsSet() const
{
    return m_TiktokIsSet;
}

void UserUpdateRequest::unsetTiktok()
{
    m_TiktokIsSet = false;
}

utility::string_t UserUpdateRequest::getId() const
{
    return m_Id;
}


void UserUpdateRequest::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t UserUpdateRequest::getConsentEmail() const
{
    return m_ConsentEmail;
}


void UserUpdateRequest::setConsentEmail(utility::string_t value)
{
    m_ConsentEmail = value;
    m_ConsentEmailIsSet = true;
}
bool UserUpdateRequest::consentEmailIsSet() const
{
    return m_ConsentEmailIsSet;
}

void UserUpdateRequest::unsetConsentEmail()
{
    m_ConsentEmailIsSet = false;
}

double UserUpdateRequest::getLongitude() const
{
    return m_Longitude;
}


void UserUpdateRequest::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool UserUpdateRequest::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void UserUpdateRequest::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}

