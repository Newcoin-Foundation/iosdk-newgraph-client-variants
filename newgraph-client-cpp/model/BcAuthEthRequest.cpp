/**
 * newlife-creator-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-05-20T13:39:48Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcAuthEthRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcAuthEthRequest::BcAuthEthRequest()
{
    m_NftIndex = utility::conversions::to_string_t("");
    m_CollectionAddress = utility::conversions::to_string_t("");
    m_Address = utility::conversions::to_string_t("");
    m_Signature = utility::conversions::to_string_t("");
    m_Nonce = utility::conversions::to_string_t("");
    m_NonceIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
}

BcAuthEthRequest::~BcAuthEthRequest()
{
}

void BcAuthEthRequest::validate()
{
    // TODO: implement validation
}

web::json::value BcAuthEthRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("nftIndex")] = ModelBase::toJson(m_NftIndex);
    val[utility::conversions::to_string_t("collectionAddress")] = ModelBase::toJson(m_CollectionAddress);
    val[utility::conversions::to_string_t("address")] = ModelBase::toJson(m_Address);
    val[utility::conversions::to_string_t("signature")] = ModelBase::toJson(m_Signature);
    if(m_NonceIsSet)
    {
        val[utility::conversions::to_string_t("nonce")] = ModelBase::toJson(m_Nonce);
    }
    val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);

    return val;
}

void BcAuthEthRequest::fromJson(web::json::value& val)
{
    setNftIndex(ModelBase::stringFromJson(val[utility::conversions::to_string_t("nftIndex")]));
    setCollectionAddress(ModelBase::stringFromJson(val[utility::conversions::to_string_t("collectionAddress")]));
    setAddress(ModelBase::stringFromJson(val[utility::conversions::to_string_t("address")]));
    setSignature(ModelBase::stringFromJson(val[utility::conversions::to_string_t("signature")]));
    if(val.has_field(utility::conversions::to_string_t("nonce")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("nonce")];
        if(!fieldValue.is_null())
        {
            setNonce(ModelBase::stringFromJson(fieldValue));
        }
    }
    setTimestamp(ModelBase::stringFromJson(val[utility::conversions::to_string_t("timestamp")]));
}

void BcAuthEthRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nftIndex"), m_NftIndex));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionAddress"), m_CollectionAddress));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address"), m_Address));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signature"), m_Signature));
    if(m_NonceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nonce"), m_Nonce));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
}

void BcAuthEthRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setNftIndex(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nftIndex"))));
    setCollectionAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionAddress"))));
    setAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("address"))));
    setSignature(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("signature"))));
    if(multipart->hasContent(utility::conversions::to_string_t("nonce")))
    {
        setNonce(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nonce"))));
    }
    setTimestamp(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
}

utility::string_t BcAuthEthRequest::getNftIndex() const
{
    return m_NftIndex;
}


void BcAuthEthRequest::setNftIndex(utility::string_t value)
{
    m_NftIndex = value;
    
}
utility::string_t BcAuthEthRequest::getCollectionAddress() const
{
    return m_CollectionAddress;
}


void BcAuthEthRequest::setCollectionAddress(utility::string_t value)
{
    m_CollectionAddress = value;
    
}
utility::string_t BcAuthEthRequest::getAddress() const
{
    return m_Address;
}


void BcAuthEthRequest::setAddress(utility::string_t value)
{
    m_Address = value;
    
}
utility::string_t BcAuthEthRequest::getSignature() const
{
    return m_Signature;
}


void BcAuthEthRequest::setSignature(utility::string_t value)
{
    m_Signature = value;
    
}
utility::string_t BcAuthEthRequest::getNonce() const
{
    return m_Nonce;
}


void BcAuthEthRequest::setNonce(utility::string_t value)
{
    m_Nonce = value;
    m_NonceIsSet = true;
}
bool BcAuthEthRequest::nonceIsSet() const
{
    return m_NonceIsSet;
}

void BcAuthEthRequest::unsetNonce()
{
    m_NonceIsSet = false;
}

utility::string_t BcAuthEthRequest::getTimestamp() const
{
    return m_Timestamp;
}


void BcAuthEthRequest::setTimestamp(utility::string_t value)
{
    m_Timestamp = value;
    
}
}
}
}
}

