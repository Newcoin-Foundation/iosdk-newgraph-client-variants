/**
 * newlife-creator-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-05-20T13:39:48Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserCreateRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserCreateRequest::UserCreateRequest()
{
    m_NewcoinTicker = utility::conversions::to_string_t("");
    m_NewcoinTickerIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_ConsentPrivacyPolicy = utility::conversions::to_string_t("");
    m_ConsentPrivacyPolicyIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Tumblr = utility::conversions::to_string_t("");
    m_TumblrIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Instagram = utility::conversions::to_string_t("");
    m_InstagramIsSet = false;
    m_Soundcloud = utility::conversions::to_string_t("");
    m_SoundcloudIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_Twitter = utility::conversions::to_string_t("");
    m_TwitterIsSet = false;
    m_ConsentTestgroup = utility::conversions::to_string_t("");
    m_ConsentTestgroupIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_Tiktok = utility::conversions::to_string_t("");
    m_TiktokIsSet = false;
    m_LegacyToken = utility::conversions::to_string_t("");
    m_LegacyTokenIsSet = false;
    m_ConsentEmail = utility::conversions::to_string_t("");
    m_ConsentEmailIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
    m_Username = utility::conversions::to_string_t("");
}

UserCreateRequest::~UserCreateRequest()
{
}

void UserCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value UserCreateRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NewcoinTickerIsSet)
    {
        val[utility::conversions::to_string_t("newcoinTicker")] = ModelBase::toJson(m_NewcoinTicker);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_WebsiteIsSet)
    {
        val[utility::conversions::to_string_t("website")] = ModelBase::toJson(m_Website);
    }
    if(m_ConsentPrivacyPolicyIsSet)
    {
        val[utility::conversions::to_string_t("consentPrivacyPolicy")] = ModelBase::toJson(m_ConsentPrivacyPolicy);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_TumblrIsSet)
    {
        val[utility::conversions::to_string_t("tumblr")] = ModelBase::toJson(m_Tumblr);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_InstagramIsSet)
    {
        val[utility::conversions::to_string_t("instagram")] = ModelBase::toJson(m_Instagram);
    }
    if(m_SoundcloudIsSet)
    {
        val[utility::conversions::to_string_t("soundcloud")] = ModelBase::toJson(m_Soundcloud);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_TwitterIsSet)
    {
        val[utility::conversions::to_string_t("twitter")] = ModelBase::toJson(m_Twitter);
    }
    if(m_ConsentTestgroupIsSet)
    {
        val[utility::conversions::to_string_t("consentTestgroup")] = ModelBase::toJson(m_ConsentTestgroup);
    }
    val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    if(m_TiktokIsSet)
    {
        val[utility::conversions::to_string_t("tiktok")] = ModelBase::toJson(m_Tiktok);
    }
    if(m_LegacyTokenIsSet)
    {
        val[utility::conversions::to_string_t("legacyToken")] = ModelBase::toJson(m_LegacyToken);
    }
    if(m_ConsentEmailIsSet)
    {
        val[utility::conversions::to_string_t("consentEmail")] = ModelBase::toJson(m_ConsentEmail);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }
    val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);

    return val;
}

void UserCreateRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("newcoinTicker")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinTicker")];
        if(!fieldValue.is_null())
        {
            setNewcoinTicker(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("website")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("website")];
        if(!fieldValue.is_null())
        {
            setWebsite(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentPrivacyPolicy")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentPrivacyPolicy")];
        if(!fieldValue.is_null())
        {
            setConsentPrivacyPolicy(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("displayName")];
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fullName")];
        if(!fieldValue.is_null())
        {
            setFullName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tumblr")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tumblr")];
        if(!fieldValue.is_null())
        {
            setTumblr(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("description")];
        if(!fieldValue.is_null())
        {
            setDescription(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instagram")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("instagram")];
        if(!fieldValue.is_null())
        {
            setInstagram(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("soundcloud")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("soundcloud")];
        if(!fieldValue.is_null())
        {
            setSoundcloud(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("twitter")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("twitter")];
        if(!fieldValue.is_null())
        {
            setTwitter(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentTestgroup")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentTestgroup")];
        if(!fieldValue.is_null())
        {
            setConsentTestgroup(ModelBase::stringFromJson(fieldValue));
        }
    }
    setPhone(ModelBase::stringFromJson(val[utility::conversions::to_string_t("phone")]));
    if(val.has_field(utility::conversions::to_string_t("tiktok")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tiktok")];
        if(!fieldValue.is_null())
        {
            setTiktok(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("legacyToken")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("legacyToken")];
        if(!fieldValue.is_null())
        {
            setLegacyToken(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentEmail")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentEmail")];
        if(!fieldValue.is_null())
        {
            setConsentEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setUsername(ModelBase::stringFromJson(val[utility::conversions::to_string_t("username")]));
}

void UserCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NewcoinTickerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinTicker"), m_NewcoinTicker));
        
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
        
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("website"), m_Website));
        
    }
    if(m_ConsentPrivacyPolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentPrivacyPolicy"), m_ConsentPrivacyPolicy));
        
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
        
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
        
    }
    if(m_TumblrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tumblr"), m_Tumblr));
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
        
    }
    if(m_InstagramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instagram"), m_Instagram));
        
    }
    if(m_SoundcloudIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("soundcloud"), m_Soundcloud));
        
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
        
    }
    if(m_TwitterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("twitter"), m_Twitter));
        
    }
    if(m_ConsentTestgroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentTestgroup"), m_ConsentTestgroup));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    if(m_TiktokIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tiktok"), m_Tiktok));
        
    }
    if(m_LegacyTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("legacyToken"), m_LegacyToken));
        
    }
    if(m_ConsentEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentEmail"), m_ConsentEmail));
        
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
        
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
}

void UserCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("newcoinTicker")))
    {
        setNewcoinTicker(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinTicker"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("website")))
    {
        setWebsite(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("website"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentPrivacyPolicy")))
    {
        setConsentPrivacyPolicy(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentPrivacyPolicy"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tumblr")))
    {
        setTumblr(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tumblr"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instagram")))
    {
        setInstagram(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("instagram"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("soundcloud")))
    {
        setSoundcloud(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("soundcloud"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("twitter")))
    {
        setTwitter(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("twitter"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentTestgroup")))
    {
        setConsentTestgroup(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentTestgroup"))));
    }
    setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    if(multipart->hasContent(utility::conversions::to_string_t("tiktok")))
    {
        setTiktok(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tiktok"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("legacyToken")))
    {
        setLegacyToken(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("legacyToken"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentEmail")))
    {
        setConsentEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentEmail"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude"))));
    }
    setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
}

utility::string_t UserCreateRequest::getNewcoinTicker() const
{
    return m_NewcoinTicker;
}


void UserCreateRequest::setNewcoinTicker(utility::string_t value)
{
    m_NewcoinTicker = value;
    m_NewcoinTickerIsSet = true;
}
bool UserCreateRequest::newcoinTickerIsSet() const
{
    return m_NewcoinTickerIsSet;
}

void UserCreateRequest::unsetNewcoinTicker()
{
    m_NewcoinTickerIsSet = false;
}

utility::string_t UserCreateRequest::getLastName() const
{
    return m_LastName;
}


void UserCreateRequest::setLastName(utility::string_t value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool UserCreateRequest::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void UserCreateRequest::unsetLastName()
{
    m_LastNameIsSet = false;
}

utility::string_t UserCreateRequest::getWebsite() const
{
    return m_Website;
}


void UserCreateRequest::setWebsite(utility::string_t value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}
bool UserCreateRequest::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void UserCreateRequest::unsetWebsite()
{
    m_WebsiteIsSet = false;
}

utility::string_t UserCreateRequest::getConsentPrivacyPolicy() const
{
    return m_ConsentPrivacyPolicy;
}


void UserCreateRequest::setConsentPrivacyPolicy(utility::string_t value)
{
    m_ConsentPrivacyPolicy = value;
    m_ConsentPrivacyPolicyIsSet = true;
}
bool UserCreateRequest::consentPrivacyPolicyIsSet() const
{
    return m_ConsentPrivacyPolicyIsSet;
}

void UserCreateRequest::unsetConsentPrivacyPolicy()
{
    m_ConsentPrivacyPolicyIsSet = false;
}

utility::string_t UserCreateRequest::getDisplayName() const
{
    return m_DisplayName;
}


void UserCreateRequest::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool UserCreateRequest::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void UserCreateRequest::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

double UserCreateRequest::getLatitude() const
{
    return m_Latitude;
}


void UserCreateRequest::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool UserCreateRequest::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void UserCreateRequest::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

utility::string_t UserCreateRequest::getFullName() const
{
    return m_FullName;
}


void UserCreateRequest::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool UserCreateRequest::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void UserCreateRequest::unsetFullName()
{
    m_FullNameIsSet = false;
}

utility::string_t UserCreateRequest::getTumblr() const
{
    return m_Tumblr;
}


void UserCreateRequest::setTumblr(utility::string_t value)
{
    m_Tumblr = value;
    m_TumblrIsSet = true;
}
bool UserCreateRequest::tumblrIsSet() const
{
    return m_TumblrIsSet;
}

void UserCreateRequest::unsetTumblr()
{
    m_TumblrIsSet = false;
}

utility::string_t UserCreateRequest::getDescription() const
{
    return m_Description;
}


void UserCreateRequest::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool UserCreateRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UserCreateRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t UserCreateRequest::getInstagram() const
{
    return m_Instagram;
}


void UserCreateRequest::setInstagram(utility::string_t value)
{
    m_Instagram = value;
    m_InstagramIsSet = true;
}
bool UserCreateRequest::instagramIsSet() const
{
    return m_InstagramIsSet;
}

void UserCreateRequest::unsetInstagram()
{
    m_InstagramIsSet = false;
}

utility::string_t UserCreateRequest::getSoundcloud() const
{
    return m_Soundcloud;
}


void UserCreateRequest::setSoundcloud(utility::string_t value)
{
    m_Soundcloud = value;
    m_SoundcloudIsSet = true;
}
bool UserCreateRequest::soundcloudIsSet() const
{
    return m_SoundcloudIsSet;
}

void UserCreateRequest::unsetSoundcloud()
{
    m_SoundcloudIsSet = false;
}

utility::string_t UserCreateRequest::getFirstName() const
{
    return m_FirstName;
}


void UserCreateRequest::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool UserCreateRequest::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void UserCreateRequest::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

utility::string_t UserCreateRequest::getTwitter() const
{
    return m_Twitter;
}


void UserCreateRequest::setTwitter(utility::string_t value)
{
    m_Twitter = value;
    m_TwitterIsSet = true;
}
bool UserCreateRequest::twitterIsSet() const
{
    return m_TwitterIsSet;
}

void UserCreateRequest::unsetTwitter()
{
    m_TwitterIsSet = false;
}

utility::string_t UserCreateRequest::getConsentTestgroup() const
{
    return m_ConsentTestgroup;
}


void UserCreateRequest::setConsentTestgroup(utility::string_t value)
{
    m_ConsentTestgroup = value;
    m_ConsentTestgroupIsSet = true;
}
bool UserCreateRequest::consentTestgroupIsSet() const
{
    return m_ConsentTestgroupIsSet;
}

void UserCreateRequest::unsetConsentTestgroup()
{
    m_ConsentTestgroupIsSet = false;
}

utility::string_t UserCreateRequest::getPhone() const
{
    return m_Phone;
}


void UserCreateRequest::setPhone(utility::string_t value)
{
    m_Phone = value;
    
}
utility::string_t UserCreateRequest::getTiktok() const
{
    return m_Tiktok;
}


void UserCreateRequest::setTiktok(utility::string_t value)
{
    m_Tiktok = value;
    m_TiktokIsSet = true;
}
bool UserCreateRequest::tiktokIsSet() const
{
    return m_TiktokIsSet;
}

void UserCreateRequest::unsetTiktok()
{
    m_TiktokIsSet = false;
}

utility::string_t UserCreateRequest::getLegacyToken() const
{
    return m_LegacyToken;
}


void UserCreateRequest::setLegacyToken(utility::string_t value)
{
    m_LegacyToken = value;
    m_LegacyTokenIsSet = true;
}
bool UserCreateRequest::legacyTokenIsSet() const
{
    return m_LegacyTokenIsSet;
}

void UserCreateRequest::unsetLegacyToken()
{
    m_LegacyTokenIsSet = false;
}

utility::string_t UserCreateRequest::getConsentEmail() const
{
    return m_ConsentEmail;
}


void UserCreateRequest::setConsentEmail(utility::string_t value)
{
    m_ConsentEmail = value;
    m_ConsentEmailIsSet = true;
}
bool UserCreateRequest::consentEmailIsSet() const
{
    return m_ConsentEmailIsSet;
}

void UserCreateRequest::unsetConsentEmail()
{
    m_ConsentEmailIsSet = false;
}

utility::string_t UserCreateRequest::getEmail() const
{
    return m_Email;
}


void UserCreateRequest::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool UserCreateRequest::emailIsSet() const
{
    return m_EmailIsSet;
}

void UserCreateRequest::unsetEmail()
{
    m_EmailIsSet = false;
}

double UserCreateRequest::getLongitude() const
{
    return m_Longitude;
}


void UserCreateRequest::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool UserCreateRequest::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void UserCreateRequest::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

utility::string_t UserCreateRequest::getUsername() const
{
    return m_Username;
}


void UserCreateRequest::setUsername(utility::string_t value)
{
    m_Username = value;
    
}
}
}
}
}

