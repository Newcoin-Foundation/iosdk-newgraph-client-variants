=begin
#newlife-creator-api-eu-dev

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2022-05-20T13:39:48Z

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@instance).to be_instance_of(SwaggerClient::DefaultApi)
    end
  end

  # unit tests for auth_callback_path_get
  # @param path 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_callback_path_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_callback_path_options
  # @param path 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_callback_path_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_provider_path_get
  # @param path 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_provider_path_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_provider_path_options
  # @param path 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_provider_path_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bcmaindaodldunstake_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'bcmaindaodldunstake_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bcmaindaodldunstake_post
  # @param bc_stake_main_dao_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'bcmaindaodldunstake_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bcmaindaoinstunstake_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'bcmaindaoinstunstake_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bcmaindaoinstunstake_post
  # @param bc_stake_pool_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'bcmaindaoinstunstake_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bcmaindaostake_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'bcmaindaostake_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bcmaindaostake_post
  # @param bc_stake_main_dao_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'bcmaindaostake_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for folder_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @return [MoodReadResponse]
  describe 'folder_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for folder_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'folder_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for info_auth_get
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'info_auth_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for info_auth_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'info_auth_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for info_get
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'info_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for info_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'info_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_attach_post_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mood_attach_post_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_attach_post_put
  # @param mood_attach_request 
  # @param [Hash] opts the optional parameters
  # @return [PostReadResponse]
  describe 'mood_attach_post_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @return [MoodReadResponse]
  describe 'mood_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_list_top_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :direction 
  # @option opts [String] :content_type 
  # @option opts [String] :page 
  # @option opts [String] :order_by 
  # @return [MoodPagedListReadPublicResponse]
  describe 'mood_list_top_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_list_top_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mood_list_top_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mood_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_post
  # @param mood_create_request 
  # @param [Hash] opts the optional parameters
  # @return [MoodCreateResponse]
  describe 'mood_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_posts_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @option opts [String] :page 
  # @return [MoodListAttachedPostsResponse]
  describe 'mood_posts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_posts_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mood_posts_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_put
  # @param mood_update_request 
  # @param [Hash] opts the optional parameters
  # @return [MoodReadResponse]
  describe 'mood_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_rate_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mood_rate_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_rate_post
  # @param rating_update_request 
  # @param [Hash] opts the optional parameters
  # @return [RatingUpdateResponse]
  describe 'mood_rate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_upload_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mood_upload_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mood_upload_post
  # @param upload_request_generic 
  # @param [Hash] opts the optional parameters
  # @return [UploadResponse]
  describe 'mood_upload_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcaccopen_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bcaccopen_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcaccopen_post
  # @param bc_acc_create_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'newcoin_bcaccopen_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcautheth_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bcautheth_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcautheth_post
  # @param bc_auth_eth_request 
  # @param [Hash] opts the optional parameters
  # @return [BcAuthEthResponse]
  describe 'newcoin_bcautheth_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bccolcreate_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bccolcreate_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bccolcreate_post
  # @param bc_collection_create_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'newcoin_bccolcreate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcgetacc_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bcgetacc_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcgetacc_post
  # @param bc_get_account_info 
  # @param [Hash] opts the optional parameters
  # @return [BcGetInfoResp]
  describe 'newcoin_bcgetacc_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcgetpool_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bcgetpool_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcgetpool_post
  # @param bc_get_pool_info 
  # @param [Hash] opts the optional parameters
  # @return [BcGetInfoResp]
  describe 'newcoin_bcgetpool_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bckeypair_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bckeypair_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bckeypair_post
  # @param bc_key_pair_create_request 
  # @param [Hash] opts the optional parameters
  # @return [BcKeyPairCreateResponse]
  describe 'newcoin_bckeypair_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcmintasset_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bcmintasset_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcmintasset_post
  # @param bc_mint_asset_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'newcoin_bcmintasset_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcpoolcreate_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bcpoolcreate_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcpoolcreate_post
  # @param bc_pool_create_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'newcoin_bcpoolcreate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcpoolstake_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_bcpoolstake_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_bcpoolstake_post
  # @param bc_stake_pool_request 
  # @param [Hash] opts the optional parameters
  # @return [BcTxResponse]
  describe 'newcoin_bcpoolstake_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_create_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_create_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_create_post
  # @param bc_create_dao_request 
  # @param [Hash] opts the optional parameters
  # @return [BcCreateDaoResponse]
  describe 'newcoin_dao_create_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_approve_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_proposal_approve_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_approve_post
  # @param bc_approve_dao_proposal_request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_proposal_approve_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_list_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :proposal_author 
  # @option opts [String] :dao_owner 
  # @option opts [String] :dao_id 
  # @option opts [String] :id 
  # @return [BcListDaoProposalsResponse]
  describe 'newcoin_dao_proposal_list_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_list_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_proposal_list_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_proposal_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_post
  # @param bc_create_dao_proposal 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_proposal_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_vote_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_proposal_vote_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_vote_post
  # @param bc_dao_proposal_vote_request 
  # @param [Hash] opts the optional parameters
  # @return [BcListDaoProposalsResponse]
  describe 'newcoin_dao_proposal_vote_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_votes_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :voter 
  # @option opts [String] :vote_id 
  # @return [BcDaoProposalVoteResponse]
  describe 'newcoin_dao_proposal_votes_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for newcoin_dao_proposal_votes_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'newcoin_dao_proposal_votes_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment_stripe_intent_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'payment_stripe_intent_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment_stripe_intent_post
  # @param payment_stripe_payment_intent_create_request 
  # @param [Hash] opts the optional parameters
  # @return [PaymentStripePaymentIntentCreateResponse]
  describe 'payment_stripe_intent_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment_stripe_subscription_payment_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'payment_stripe_subscription_payment_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment_stripe_subscription_payment_post
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'payment_stripe_subscription_payment_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment_stripe_webhook_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'payment_stripe_webhook_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment_stripe_webhook_post
  # @param payment_stripe_webhook_request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'payment_stripe_webhook_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @return [PostReadResponse]
  describe 'post_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list_search_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :direction 
  # @option opts [String] :content_type 
  # @option opts [String] :page 
  # @option opts [String] :order_by 
  # @option opts [String] :q 
  # @return [PostPagedListReadPublicResponse]
  describe 'post_list_search_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list_search_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_list_search_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list_tags_search_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :direction 
  # @option opts [String] :content_type 
  # @option opts [String] :page 
  # @option opts [String] :order_by 
  # @option opts [String] :q 
  # @return [PostTagsSearchPublicResponse]
  describe 'post_list_tags_search_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list_tags_search_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_list_tags_search_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list_top_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :direction 
  # @option opts [String] :content_type 
  # @option opts [String] :page 
  # @option opts [String] :order_by 
  # @return [PostPagedListReadPublicResponse]
  describe 'post_list_top_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list_top_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_list_top_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_post
  # @param post_create_request 
  # @param [Hash] opts the optional parameters
  # @return [PostCreateResponse]
  describe 'post_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_put
  # @param post_update_request 
  # @param [Hash] opts the optional parameters
  # @return [PostReadResponse]
  describe 'post_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_rate_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_rate_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_rate_post
  # @param rating_update_request 
  # @param [Hash] opts the optional parameters
  # @return [RatingUpdateResponse]
  describe 'post_rate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_report_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_report_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_report_post
  # @param report_update_request 
  # @param [Hash] opts the optional parameters
  # @return [ReportUpdateResponse]
  describe 'post_report_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_upload_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_upload_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_upload_post
  # @param upload_request_generic 
  # @param [Hash] opts the optional parameters
  # @return [UploadResponse]
  describe 'post_upload_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_creative_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :aesthetics 
  # @option opts [String] :tags 
  # @option opts [String] :page 
  # @return [CreativeSearchResponse]
  describe 'search_creative_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_creative_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'search_creative_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_node_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_node_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_node_post
  # @param upload_request 
  # @param [Hash] opts the optional parameters
  # @return [UploadResponse]
  describe 'upload_node_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_activity_stream_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :after 
  # @option opts [String] :limit 
  # @return [AnyResponse]
  describe 'user_activity_stream_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_activity_stream_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_activity_stream_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_availability_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :username 
  # @return [UserAvailabilityResponse]
  describe 'user_availability_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_availability_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_availability_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_current_get
  # @param [Hash] opts the optional parameters
  # @return [UserReadPrivateResponse]
  describe 'user_current_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_current_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_current_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_delete
  # @param user_delete_request 
  # @param [Hash] opts the optional parameters
  # @return [OkResponse]
  describe 'user_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :username 
  # @option opts [String] :id 
  # @return [UserReadPublicResponse]
  describe 'user_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_invite_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_invite_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_invite_post
  # @param user_invite_request 
  # @param [Hash] opts the optional parameters
  # @return [OkResponse]
  describe 'user_invite_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_list_search_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :direction 
  # @option opts [String] :content_type 
  # @option opts [String] :page 
  # @option opts [String] :order_by 
  # @option opts [String] :q 
  # @return [UserPagedListReadPublicResponse]
  describe 'user_list_search_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_list_search_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_list_search_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_list_top_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :direction 
  # @option opts [String] :content_type 
  # @option opts [String] :page 
  # @option opts [String] :order_by 
  # @return [UserPagedListReadPublicResponse]
  describe 'user_list_top_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_list_top_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_list_top_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_moods_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @option opts [String] :page 
  # @return [MoodPagedListReadPublicResponse]
  describe 'user_moods_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_moods_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_moods_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_post
  # @param user_create_request 
  # @param [Hash] opts the optional parameters
  # @return [UserReadPrivateResponse]
  describe 'user_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_preregister_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_preregister_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_preregister_post
  # @param user_pre_register_request 
  # @param [Hash] opts the optional parameters
  # @return [UserReadPrivateResponse]
  describe 'user_preregister_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_put
  # @param user_update_request 
  # @param [Hash] opts the optional parameters
  # @return [UserReadPrivateResponse]
  describe 'user_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_rated_in_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @option opts [String] :page 
  # @return [PagedRatedResponseUser]
  describe 'user_rated_in_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_rated_in_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_rated_in_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_rated_out_posts_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @option opts [String] :page 
  # @return [PagedRatedResponsePost]
  describe 'user_rated_out_posts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_rated_out_posts_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_rated_out_posts_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_rated_out_users_get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id 
  # @option opts [String] :page 
  # @return [PagedRatedResponseUser]
  describe 'user_rated_out_users_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_rated_out_users_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_rated_out_users_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_stake_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_stake_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_stake_post
  # @param user_stake_request 
  # @param [Hash] opts the optional parameters
  # @return [AnyResponse]
  describe 'user_stake_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_sync_contacts_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_sync_contacts_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_sync_contacts_post
  # @param sync_contacts_request 
  # @param [Hash] opts the optional parameters
  # @return [SyncContactsResponse]
  describe 'user_sync_contacts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_upload_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_upload_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_upload_post
  # @param user_upload_request 
  # @param [Hash] opts the optional parameters
  # @return [UploadResponse]
  describe 'user_upload_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_user_rate_options
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_user_rate_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_user_rate_post
  # @param rating_update_request 
  # @param [Hash] opts the optional parameters
  # @return [RatingUpdateResponse]
  describe 'user_user_rate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
