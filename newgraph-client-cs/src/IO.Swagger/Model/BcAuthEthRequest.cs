/* 
 * newlife-creator-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-06-09T06:13:03Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BcAuthEthRequest
    /// </summary>
    [DataContract]
    public partial class BcAuthEthRequest :  IEquatable<BcAuthEthRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcAuthEthRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BcAuthEthRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BcAuthEthRequest" /> class.
        /// </summary>
        /// <param name="nftIndex">nftIndex (required).</param>
        /// <param name="collectionAddress">collectionAddress (required).</param>
        /// <param name="address">address (required).</param>
        /// <param name="signature">signature (required).</param>
        /// <param name="nonce">nonce.</param>
        /// <param name="timestamp">timestamp (required).</param>
        public BcAuthEthRequest(string nftIndex = default(string), string collectionAddress = default(string), string address = default(string), string signature = default(string), string nonce = default(string), string timestamp = default(string))
        {
            // to ensure "nftIndex" is required (not null)
            if (nftIndex == null)
            {
                throw new InvalidDataException("nftIndex is a required property for BcAuthEthRequest and cannot be null");
            }
            else
            {
                this.NftIndex = nftIndex;
            }
            // to ensure "collectionAddress" is required (not null)
            if (collectionAddress == null)
            {
                throw new InvalidDataException("collectionAddress is a required property for BcAuthEthRequest and cannot be null");
            }
            else
            {
                this.CollectionAddress = collectionAddress;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for BcAuthEthRequest and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new InvalidDataException("signature is a required property for BcAuthEthRequest and cannot be null");
            }
            else
            {
                this.Signature = signature;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for BcAuthEthRequest and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            this.Nonce = nonce;
        }
        
        /// <summary>
        /// Gets or Sets NftIndex
        /// </summary>
        [DataMember(Name="nftIndex", EmitDefaultValue=false)]
        public string NftIndex { get; set; }

        /// <summary>
        /// Gets or Sets CollectionAddress
        /// </summary>
        [DataMember(Name="collectionAddress", EmitDefaultValue=false)]
        public string CollectionAddress { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name="nonce", EmitDefaultValue=false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcAuthEthRequest {\n");
            sb.Append("  NftIndex: ").Append(NftIndex).Append("\n");
            sb.Append("  CollectionAddress: ").Append(CollectionAddress).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcAuthEthRequest);
        }

        /// <summary>
        /// Returns true if BcAuthEthRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BcAuthEthRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcAuthEthRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NftIndex == input.NftIndex ||
                    (this.NftIndex != null &&
                    this.NftIndex.Equals(input.NftIndex))
                ) && 
                (
                    this.CollectionAddress == input.CollectionAddress ||
                    (this.CollectionAddress != null &&
                    this.CollectionAddress.Equals(input.CollectionAddress))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NftIndex != null)
                    hashCode = hashCode * 59 + this.NftIndex.GetHashCode();
                if (this.CollectionAddress != null)
                    hashCode = hashCode * 59 + this.CollectionAddress.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.Nonce != null)
                    hashCode = hashCode * 59 + this.Nonce.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
