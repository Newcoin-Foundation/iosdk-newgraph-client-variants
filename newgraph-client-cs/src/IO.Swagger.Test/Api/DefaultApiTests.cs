/* 
 * newlife-creator-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-05-20T13:39:48Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test AuthCallbackPathGet
        /// </summary>
        [Test]
        public void AuthCallbackPathGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.AuthCallbackPathGet(path);
            
        }
        
        /// <summary>
        /// Test AuthCallbackPathOptions
        /// </summary>
        [Test]
        public void AuthCallbackPathOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.AuthCallbackPathOptions(path);
            
        }
        
        /// <summary>
        /// Test AuthProviderPathGet
        /// </summary>
        [Test]
        public void AuthProviderPathGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.AuthProviderPathGet(path);
            
        }
        
        /// <summary>
        /// Test AuthProviderPathOptions
        /// </summary>
        [Test]
        public void AuthProviderPathOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.AuthProviderPathOptions(path);
            
        }
        
        /// <summary>
        /// Test BcmaindaodldunstakeOptions
        /// </summary>
        [Test]
        public void BcmaindaodldunstakeOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.BcmaindaodldunstakeOptions();
            
        }
        
        /// <summary>
        /// Test BcmaindaodldunstakePost
        /// </summary>
        [Test]
        public void BcmaindaodldunstakePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcStakeMainDAORequest bcStakeMainDAORequest = null;
            //var response = instance.BcmaindaodldunstakePost(bcStakeMainDAORequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test BcmaindaoinstunstakeOptions
        /// </summary>
        [Test]
        public void BcmaindaoinstunstakeOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.BcmaindaoinstunstakeOptions();
            
        }
        
        /// <summary>
        /// Test BcmaindaoinstunstakePost
        /// </summary>
        [Test]
        public void BcmaindaoinstunstakePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcStakePoolRequest bcStakePoolRequest = null;
            //var response = instance.BcmaindaoinstunstakePost(bcStakePoolRequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test BcmaindaostakeOptions
        /// </summary>
        [Test]
        public void BcmaindaostakeOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.BcmaindaostakeOptions();
            
        }
        
        /// <summary>
        /// Test BcmaindaostakePost
        /// </summary>
        [Test]
        public void BcmaindaostakePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcStakeMainDAORequest bcStakeMainDAORequest = null;
            //var response = instance.BcmaindaostakePost(bcStakeMainDAORequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test FolderGet
        /// </summary>
        [Test]
        public void FolderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.FolderGet(id);
            //Assert.IsInstanceOf<MoodReadResponse> (response, "response is MoodReadResponse");
        }
        
        /// <summary>
        /// Test FolderOptions
        /// </summary>
        [Test]
        public void FolderOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.FolderOptions();
            
        }
        
        /// <summary>
        /// Test InfoAuthGet
        /// </summary>
        [Test]
        public void InfoAuthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.InfoAuthGet();
            
        }
        
        /// <summary>
        /// Test InfoAuthOptions
        /// </summary>
        [Test]
        public void InfoAuthOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.InfoAuthOptions();
            
        }
        
        /// <summary>
        /// Test InfoGet
        /// </summary>
        [Test]
        public void InfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.InfoGet();
            
        }
        
        /// <summary>
        /// Test InfoOptions
        /// </summary>
        [Test]
        public void InfoOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.InfoOptions();
            
        }
        
        /// <summary>
        /// Test MoodAttachPostOptions
        /// </summary>
        [Test]
        public void MoodAttachPostOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MoodAttachPostOptions();
            
        }
        
        /// <summary>
        /// Test MoodAttachPostPut
        /// </summary>
        [Test]
        public void MoodAttachPostPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MoodAttachRequest moodAttachRequest = null;
            //var response = instance.MoodAttachPostPut(moodAttachRequest);
            //Assert.IsInstanceOf<PostReadResponse> (response, "response is PostReadResponse");
        }
        
        /// <summary>
        /// Test MoodGet
        /// </summary>
        [Test]
        public void MoodGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.MoodGet(id);
            //Assert.IsInstanceOf<MoodReadResponse> (response, "response is MoodReadResponse");
        }
        
        /// <summary>
        /// Test MoodListTopGet
        /// </summary>
        [Test]
        public void MoodListTopGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string contentType = null;
            //string page = null;
            //string orderBy = null;
            //var response = instance.MoodListTopGet(direction, contentType, page, orderBy);
            //Assert.IsInstanceOf<MoodPagedListReadPublicResponse> (response, "response is MoodPagedListReadPublicResponse");
        }
        
        /// <summary>
        /// Test MoodListTopOptions
        /// </summary>
        [Test]
        public void MoodListTopOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MoodListTopOptions();
            
        }
        
        /// <summary>
        /// Test MoodOptions
        /// </summary>
        [Test]
        public void MoodOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MoodOptions();
            
        }
        
        /// <summary>
        /// Test MoodPost
        /// </summary>
        [Test]
        public void MoodPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MoodCreateRequest moodCreateRequest = null;
            //var response = instance.MoodPost(moodCreateRequest);
            //Assert.IsInstanceOf<MoodCreateResponse> (response, "response is MoodCreateResponse");
        }
        
        /// <summary>
        /// Test MoodPostsGet
        /// </summary>
        [Test]
        public void MoodPostsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string page = null;
            //var response = instance.MoodPostsGet(id, page);
            //Assert.IsInstanceOf<MoodListAttachedPostsResponse> (response, "response is MoodListAttachedPostsResponse");
        }
        
        /// <summary>
        /// Test MoodPostsOptions
        /// </summary>
        [Test]
        public void MoodPostsOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MoodPostsOptions();
            
        }
        
        /// <summary>
        /// Test MoodPut
        /// </summary>
        [Test]
        public void MoodPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MoodUpdateRequest moodUpdateRequest = null;
            //var response = instance.MoodPut(moodUpdateRequest);
            //Assert.IsInstanceOf<MoodReadResponse> (response, "response is MoodReadResponse");
        }
        
        /// <summary>
        /// Test MoodRateOptions
        /// </summary>
        [Test]
        public void MoodRateOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MoodRateOptions();
            
        }
        
        /// <summary>
        /// Test MoodRatePost
        /// </summary>
        [Test]
        public void MoodRatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RatingUpdateRequest ratingUpdateRequest = null;
            //var response = instance.MoodRatePost(ratingUpdateRequest);
            //Assert.IsInstanceOf<RatingUpdateResponse> (response, "response is RatingUpdateResponse");
        }
        
        /// <summary>
        /// Test MoodUploadOptions
        /// </summary>
        [Test]
        public void MoodUploadOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MoodUploadOptions();
            
        }
        
        /// <summary>
        /// Test MoodUploadPost
        /// </summary>
        [Test]
        public void MoodUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UploadRequestGeneric uploadRequestGeneric = null;
            //var response = instance.MoodUploadPost(uploadRequestGeneric);
            //Assert.IsInstanceOf<UploadResponse> (response, "response is UploadResponse");
        }
        
        /// <summary>
        /// Test NewcoinBcaccopenOptions
        /// </summary>
        [Test]
        public void NewcoinBcaccopenOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBcaccopenOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBcaccopenPost
        /// </summary>
        [Test]
        public void NewcoinBcaccopenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcAccCreateRequest bcAccCreateRequest = null;
            //var response = instance.NewcoinBcaccopenPost(bcAccCreateRequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test NewcoinBcauthethOptions
        /// </summary>
        [Test]
        public void NewcoinBcauthethOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBcauthethOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBcauthethPost
        /// </summary>
        [Test]
        public void NewcoinBcauthethPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcAuthEthRequest bcAuthEthRequest = null;
            //var response = instance.NewcoinBcauthethPost(bcAuthEthRequest);
            //Assert.IsInstanceOf<BcAuthEthResponse> (response, "response is BcAuthEthResponse");
        }
        
        /// <summary>
        /// Test NewcoinBccolcreateOptions
        /// </summary>
        [Test]
        public void NewcoinBccolcreateOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBccolcreateOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBccolcreatePost
        /// </summary>
        [Test]
        public void NewcoinBccolcreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcCollectionCreateRequest bcCollectionCreateRequest = null;
            //var response = instance.NewcoinBccolcreatePost(bcCollectionCreateRequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test NewcoinBcgetaccOptions
        /// </summary>
        [Test]
        public void NewcoinBcgetaccOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBcgetaccOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBcgetaccPost
        /// </summary>
        [Test]
        public void NewcoinBcgetaccPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcGetAccountInfo bcGetAccountInfo = null;
            //var response = instance.NewcoinBcgetaccPost(bcGetAccountInfo);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test NewcoinBcgetpoolOptions
        /// </summary>
        [Test]
        public void NewcoinBcgetpoolOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBcgetpoolOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBcgetpoolPost
        /// </summary>
        [Test]
        public void NewcoinBcgetpoolPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcGetPoolInfo bcGetPoolInfo = null;
            //var response = instance.NewcoinBcgetpoolPost(bcGetPoolInfo);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test NewcoinBckeypairOptions
        /// </summary>
        [Test]
        public void NewcoinBckeypairOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBckeypairOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBckeypairPost
        /// </summary>
        [Test]
        public void NewcoinBckeypairPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object bcKeyPairCreateRequest = null;
            //var response = instance.NewcoinBckeypairPost(bcKeyPairCreateRequest);
            //Assert.IsInstanceOf<BcKeyPairCreateResponse> (response, "response is BcKeyPairCreateResponse");
        }
        
        /// <summary>
        /// Test NewcoinBcmintassetOptions
        /// </summary>
        [Test]
        public void NewcoinBcmintassetOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBcmintassetOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBcmintassetPost
        /// </summary>
        [Test]
        public void NewcoinBcmintassetPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcMintAssetRequest bcMintAssetRequest = null;
            //var response = instance.NewcoinBcmintassetPost(bcMintAssetRequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test NewcoinBcpoolcreateOptions
        /// </summary>
        [Test]
        public void NewcoinBcpoolcreateOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBcpoolcreateOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBcpoolcreatePost
        /// </summary>
        [Test]
        public void NewcoinBcpoolcreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcPoolCreateRequest bcPoolCreateRequest = null;
            //var response = instance.NewcoinBcpoolcreatePost(bcPoolCreateRequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test NewcoinBcpoolstakeOptions
        /// </summary>
        [Test]
        public void NewcoinBcpoolstakeOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinBcpoolstakeOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinBcpoolstakePost
        /// </summary>
        [Test]
        public void NewcoinBcpoolstakePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcStakePoolRequest bcStakePoolRequest = null;
            //var response = instance.NewcoinBcpoolstakePost(bcStakePoolRequest);
            //Assert.IsInstanceOf<BcTxResponse> (response, "response is BcTxResponse");
        }
        
        /// <summary>
        /// Test NewcoinDaoCreateOptions
        /// </summary>
        [Test]
        public void NewcoinDaoCreateOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinDaoCreateOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinDaoCreatePost
        /// </summary>
        [Test]
        public void NewcoinDaoCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcCreateDaoRequest bcCreateDaoRequest = null;
            //var response = instance.NewcoinDaoCreatePost(bcCreateDaoRequest);
            //Assert.IsInstanceOf<BcCreateDaoResponse> (response, "response is BcCreateDaoResponse");
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalApproveOptions
        /// </summary>
        [Test]
        public void NewcoinDaoProposalApproveOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinDaoProposalApproveOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalApprovePost
        /// </summary>
        [Test]
        public void NewcoinDaoProposalApprovePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcApproveDaoProposalRequest bcApproveDaoProposalRequest = null;
            //instance.NewcoinDaoProposalApprovePost(bcApproveDaoProposalRequest);
            
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalListGet
        /// </summary>
        [Test]
        public void NewcoinDaoProposalListGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string proposalAuthor = null;
            //string daoOwner = null;
            //string daoId = null;
            //string id = null;
            //var response = instance.NewcoinDaoProposalListGet(proposalAuthor, daoOwner, daoId, id);
            //Assert.IsInstanceOf<BcListDaoProposalsResponse> (response, "response is BcListDaoProposalsResponse");
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalListOptions
        /// </summary>
        [Test]
        public void NewcoinDaoProposalListOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinDaoProposalListOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalOptions
        /// </summary>
        [Test]
        public void NewcoinDaoProposalOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinDaoProposalOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalPost
        /// </summary>
        [Test]
        public void NewcoinDaoProposalPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcCreateDaoProposal bcCreateDaoProposal = null;
            //instance.NewcoinDaoProposalPost(bcCreateDaoProposal);
            
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalVoteOptions
        /// </summary>
        [Test]
        public void NewcoinDaoProposalVoteOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinDaoProposalVoteOptions();
            
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalVotePost
        /// </summary>
        [Test]
        public void NewcoinDaoProposalVotePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BcDaoProposalVoteRequest bcDaoProposalVoteRequest = null;
            //var response = instance.NewcoinDaoProposalVotePost(bcDaoProposalVoteRequest);
            //Assert.IsInstanceOf<BcListDaoProposalsResponse> (response, "response is BcListDaoProposalsResponse");
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalVotesGet
        /// </summary>
        [Test]
        public void NewcoinDaoProposalVotesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string voter = null;
            //string voteId = null;
            //var response = instance.NewcoinDaoProposalVotesGet(voter, voteId);
            //Assert.IsInstanceOf<BcDaoProposalVoteResponse> (response, "response is BcDaoProposalVoteResponse");
        }
        
        /// <summary>
        /// Test NewcoinDaoProposalVotesOptions
        /// </summary>
        [Test]
        public void NewcoinDaoProposalVotesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.NewcoinDaoProposalVotesOptions();
            
        }
        
        /// <summary>
        /// Test PaymentStripeIntentOptions
        /// </summary>
        [Test]
        public void PaymentStripeIntentOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PaymentStripeIntentOptions();
            
        }
        
        /// <summary>
        /// Test PaymentStripeIntentPost
        /// </summary>
        [Test]
        public void PaymentStripeIntentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentStripePaymentIntentCreateRequest paymentStripePaymentIntentCreateRequest = null;
            //var response = instance.PaymentStripeIntentPost(paymentStripePaymentIntentCreateRequest);
            //Assert.IsInstanceOf<PaymentStripePaymentIntentCreateResponse> (response, "response is PaymentStripePaymentIntentCreateResponse");
        }
        
        /// <summary>
        /// Test PaymentStripeSubscriptionPaymentOptions
        /// </summary>
        [Test]
        public void PaymentStripeSubscriptionPaymentOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PaymentStripeSubscriptionPaymentOptions();
            
        }
        
        /// <summary>
        /// Test PaymentStripeSubscriptionPaymentPost
        /// </summary>
        [Test]
        public void PaymentStripeSubscriptionPaymentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PaymentStripeSubscriptionPaymentPost();
            
        }
        
        /// <summary>
        /// Test PaymentStripeWebhookOptions
        /// </summary>
        [Test]
        public void PaymentStripeWebhookOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PaymentStripeWebhookOptions();
            
        }
        
        /// <summary>
        /// Test PaymentStripeWebhookPost
        /// </summary>
        [Test]
        public void PaymentStripeWebhookPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentStripeWebhookRequest paymentStripeWebhookRequest = null;
            //instance.PaymentStripeWebhookPost(paymentStripeWebhookRequest);
            
        }
        
        /// <summary>
        /// Test PostGet
        /// </summary>
        [Test]
        public void PostGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.PostGet(id);
            //Assert.IsInstanceOf<PostReadResponse> (response, "response is PostReadResponse");
        }
        
        /// <summary>
        /// Test PostListSearchGet
        /// </summary>
        [Test]
        public void PostListSearchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string contentType = null;
            //string page = null;
            //string orderBy = null;
            //string q = null;
            //var response = instance.PostListSearchGet(direction, contentType, page, orderBy, q);
            //Assert.IsInstanceOf<PostPagedListReadPublicResponse> (response, "response is PostPagedListReadPublicResponse");
        }
        
        /// <summary>
        /// Test PostListSearchOptions
        /// </summary>
        [Test]
        public void PostListSearchOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PostListSearchOptions();
            
        }
        
        /// <summary>
        /// Test PostListTagsSearchGet
        /// </summary>
        [Test]
        public void PostListTagsSearchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string contentType = null;
            //string page = null;
            //string orderBy = null;
            //string q = null;
            //var response = instance.PostListTagsSearchGet(direction, contentType, page, orderBy, q);
            //Assert.IsInstanceOf<PostTagsSearchPublicResponse> (response, "response is PostTagsSearchPublicResponse");
        }
        
        /// <summary>
        /// Test PostListTagsSearchOptions
        /// </summary>
        [Test]
        public void PostListTagsSearchOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PostListTagsSearchOptions();
            
        }
        
        /// <summary>
        /// Test PostListTopGet
        /// </summary>
        [Test]
        public void PostListTopGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string contentType = null;
            //string page = null;
            //string orderBy = null;
            //var response = instance.PostListTopGet(direction, contentType, page, orderBy);
            //Assert.IsInstanceOf<PostPagedListReadPublicResponse> (response, "response is PostPagedListReadPublicResponse");
        }
        
        /// <summary>
        /// Test PostListTopOptions
        /// </summary>
        [Test]
        public void PostListTopOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PostListTopOptions();
            
        }
        
        /// <summary>
        /// Test PostOptions
        /// </summary>
        [Test]
        public void PostOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PostOptions();
            
        }
        
        /// <summary>
        /// Test PostPost
        /// </summary>
        [Test]
        public void PostPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostCreateRequest postCreateRequest = null;
            //var response = instance.PostPost(postCreateRequest);
            //Assert.IsInstanceOf<PostCreateResponse> (response, "response is PostCreateResponse");
        }
        
        /// <summary>
        /// Test PostPut
        /// </summary>
        [Test]
        public void PostPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostUpdateRequest postUpdateRequest = null;
            //var response = instance.PostPut(postUpdateRequest);
            //Assert.IsInstanceOf<PostReadResponse> (response, "response is PostReadResponse");
        }
        
        /// <summary>
        /// Test PostRateOptions
        /// </summary>
        [Test]
        public void PostRateOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PostRateOptions();
            
        }
        
        /// <summary>
        /// Test PostRatePost
        /// </summary>
        [Test]
        public void PostRatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RatingUpdateRequest ratingUpdateRequest = null;
            //var response = instance.PostRatePost(ratingUpdateRequest);
            //Assert.IsInstanceOf<RatingUpdateResponse> (response, "response is RatingUpdateResponse");
        }
        
        /// <summary>
        /// Test PostReportOptions
        /// </summary>
        [Test]
        public void PostReportOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PostReportOptions();
            
        }
        
        /// <summary>
        /// Test PostReportPost
        /// </summary>
        [Test]
        public void PostReportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReportUpdateRequest reportUpdateRequest = null;
            //var response = instance.PostReportPost(reportUpdateRequest);
            //Assert.IsInstanceOf<ReportUpdateResponse> (response, "response is ReportUpdateResponse");
        }
        
        /// <summary>
        /// Test PostUploadOptions
        /// </summary>
        [Test]
        public void PostUploadOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PostUploadOptions();
            
        }
        
        /// <summary>
        /// Test PostUploadPost
        /// </summary>
        [Test]
        public void PostUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UploadRequestGeneric uploadRequestGeneric = null;
            //var response = instance.PostUploadPost(uploadRequestGeneric);
            //Assert.IsInstanceOf<UploadResponse> (response, "response is UploadResponse");
        }
        
        /// <summary>
        /// Test SearchCreativeGet
        /// </summary>
        [Test]
        public void SearchCreativeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aesthetics = null;
            //string tags = null;
            //string page = null;
            //var response = instance.SearchCreativeGet(aesthetics, tags, page);
            //Assert.IsInstanceOf<CreativeSearchResponse> (response, "response is CreativeSearchResponse");
        }
        
        /// <summary>
        /// Test SearchCreativeOptions
        /// </summary>
        [Test]
        public void SearchCreativeOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.SearchCreativeOptions();
            
        }
        
        /// <summary>
        /// Test UploadNodeOptions
        /// </summary>
        [Test]
        public void UploadNodeOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UploadNodeOptions();
            
        }
        
        /// <summary>
        /// Test UploadNodePost
        /// </summary>
        [Test]
        public void UploadNodePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UploadRequest uploadRequest = null;
            //var response = instance.UploadNodePost(uploadRequest);
            //Assert.IsInstanceOf<UploadResponse> (response, "response is UploadResponse");
        }
        
        /// <summary>
        /// Test UserActivityStreamGet
        /// </summary>
        [Test]
        public void UserActivityStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string after = null;
            //string limit = null;
            //var response = instance.UserActivityStreamGet(after, limit);
            //Assert.IsInstanceOf<AnyResponse> (response, "response is AnyResponse");
        }
        
        /// <summary>
        /// Test UserActivityStreamOptions
        /// </summary>
        [Test]
        public void UserActivityStreamOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserActivityStreamOptions();
            
        }
        
        /// <summary>
        /// Test UserAvailabilityGet
        /// </summary>
        [Test]
        public void UserAvailabilityGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.UserAvailabilityGet(username);
            //Assert.IsInstanceOf<UserAvailabilityResponse> (response, "response is UserAvailabilityResponse");
        }
        
        /// <summary>
        /// Test UserAvailabilityOptions
        /// </summary>
        [Test]
        public void UserAvailabilityOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserAvailabilityOptions();
            
        }
        
        /// <summary>
        /// Test UserCurrentGet
        /// </summary>
        [Test]
        public void UserCurrentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserCurrentGet();
            //Assert.IsInstanceOf<UserReadPrivateResponse> (response, "response is UserReadPrivateResponse");
        }
        
        /// <summary>
        /// Test UserCurrentOptions
        /// </summary>
        [Test]
        public void UserCurrentOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserCurrentOptions();
            
        }
        
        /// <summary>
        /// Test UserDelete
        /// </summary>
        [Test]
        public void UserDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserDeleteRequest userDeleteRequest = null;
            //var response = instance.UserDelete(userDeleteRequest);
            //Assert.IsInstanceOf<OkResponse> (response, "response is OkResponse");
        }
        
        /// <summary>
        /// Test UserGet
        /// </summary>
        [Test]
        public void UserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string id = null;
            //var response = instance.UserGet(username, id);
            //Assert.IsInstanceOf<UserReadPublicResponse> (response, "response is UserReadPublicResponse");
        }
        
        /// <summary>
        /// Test UserInviteOptions
        /// </summary>
        [Test]
        public void UserInviteOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserInviteOptions();
            
        }
        
        /// <summary>
        /// Test UserInvitePost
        /// </summary>
        [Test]
        public void UserInvitePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInviteRequest userInviteRequest = null;
            //var response = instance.UserInvitePost(userInviteRequest);
            //Assert.IsInstanceOf<OkResponse> (response, "response is OkResponse");
        }
        
        /// <summary>
        /// Test UserListSearchGet
        /// </summary>
        [Test]
        public void UserListSearchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string contentType = null;
            //string page = null;
            //string orderBy = null;
            //string q = null;
            //var response = instance.UserListSearchGet(direction, contentType, page, orderBy, q);
            //Assert.IsInstanceOf<UserPagedListReadPublicResponse> (response, "response is UserPagedListReadPublicResponse");
        }
        
        /// <summary>
        /// Test UserListSearchOptions
        /// </summary>
        [Test]
        public void UserListSearchOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserListSearchOptions();
            
        }
        
        /// <summary>
        /// Test UserListTopGet
        /// </summary>
        [Test]
        public void UserListTopGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string contentType = null;
            //string page = null;
            //string orderBy = null;
            //var response = instance.UserListTopGet(direction, contentType, page, orderBy);
            //Assert.IsInstanceOf<UserPagedListReadPublicResponse> (response, "response is UserPagedListReadPublicResponse");
        }
        
        /// <summary>
        /// Test UserListTopOptions
        /// </summary>
        [Test]
        public void UserListTopOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserListTopOptions();
            
        }
        
        /// <summary>
        /// Test UserMoodsGet
        /// </summary>
        [Test]
        public void UserMoodsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string page = null;
            //var response = instance.UserMoodsGet(id, page);
            //Assert.IsInstanceOf<MoodPagedListReadPublicResponse> (response, "response is MoodPagedListReadPublicResponse");
        }
        
        /// <summary>
        /// Test UserMoodsOptions
        /// </summary>
        [Test]
        public void UserMoodsOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserMoodsOptions();
            
        }
        
        /// <summary>
        /// Test UserOptions
        /// </summary>
        [Test]
        public void UserOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserOptions();
            
        }
        
        /// <summary>
        /// Test UserPost
        /// </summary>
        [Test]
        public void UserPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserCreateRequest userCreateRequest = null;
            //var response = instance.UserPost(userCreateRequest);
            //Assert.IsInstanceOf<UserReadPrivateResponse> (response, "response is UserReadPrivateResponse");
        }
        
        /// <summary>
        /// Test UserPreregisterOptions
        /// </summary>
        [Test]
        public void UserPreregisterOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserPreregisterOptions();
            
        }
        
        /// <summary>
        /// Test UserPreregisterPost
        /// </summary>
        [Test]
        public void UserPreregisterPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserPreRegisterRequest userPreRegisterRequest = null;
            //var response = instance.UserPreregisterPost(userPreRegisterRequest);
            //Assert.IsInstanceOf<UserReadPrivateResponse> (response, "response is UserReadPrivateResponse");
        }
        
        /// <summary>
        /// Test UserPut
        /// </summary>
        [Test]
        public void UserPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserUpdateRequest userUpdateRequest = null;
            //var response = instance.UserPut(userUpdateRequest);
            //Assert.IsInstanceOf<UserReadPrivateResponse> (response, "response is UserReadPrivateResponse");
        }
        
        /// <summary>
        /// Test UserRatedInGet
        /// </summary>
        [Test]
        public void UserRatedInGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string page = null;
            //var response = instance.UserRatedInGet(id, page);
            //Assert.IsInstanceOf<PagedRatedResponseUser> (response, "response is PagedRatedResponseUser");
        }
        
        /// <summary>
        /// Test UserRatedInOptions
        /// </summary>
        [Test]
        public void UserRatedInOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserRatedInOptions();
            
        }
        
        /// <summary>
        /// Test UserRatedOutPostsGet
        /// </summary>
        [Test]
        public void UserRatedOutPostsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string page = null;
            //var response = instance.UserRatedOutPostsGet(id, page);
            //Assert.IsInstanceOf<PagedRatedResponsePost> (response, "response is PagedRatedResponsePost");
        }
        
        /// <summary>
        /// Test UserRatedOutPostsOptions
        /// </summary>
        [Test]
        public void UserRatedOutPostsOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserRatedOutPostsOptions();
            
        }
        
        /// <summary>
        /// Test UserRatedOutUsersGet
        /// </summary>
        [Test]
        public void UserRatedOutUsersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string page = null;
            //var response = instance.UserRatedOutUsersGet(id, page);
            //Assert.IsInstanceOf<PagedRatedResponseUser> (response, "response is PagedRatedResponseUser");
        }
        
        /// <summary>
        /// Test UserRatedOutUsersOptions
        /// </summary>
        [Test]
        public void UserRatedOutUsersOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserRatedOutUsersOptions();
            
        }
        
        /// <summary>
        /// Test UserStakeOptions
        /// </summary>
        [Test]
        public void UserStakeOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserStakeOptions();
            
        }
        
        /// <summary>
        /// Test UserStakePost
        /// </summary>
        [Test]
        public void UserStakePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserStakeRequest userStakeRequest = null;
            //var response = instance.UserStakePost(userStakeRequest);
            //Assert.IsInstanceOf<AnyResponse> (response, "response is AnyResponse");
        }
        
        /// <summary>
        /// Test UserSyncContactsOptions
        /// </summary>
        [Test]
        public void UserSyncContactsOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserSyncContactsOptions();
            
        }
        
        /// <summary>
        /// Test UserSyncContactsPost
        /// </summary>
        [Test]
        public void UserSyncContactsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SyncContactsRequest syncContactsRequest = null;
            //var response = instance.UserSyncContactsPost(syncContactsRequest);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test UserUploadOptions
        /// </summary>
        [Test]
        public void UserUploadOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserUploadOptions();
            
        }
        
        /// <summary>
        /// Test UserUploadPost
        /// </summary>
        [Test]
        public void UserUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserUploadRequest userUploadRequest = null;
            //var response = instance.UserUploadPost(userUploadRequest);
            //Assert.IsInstanceOf<UploadResponse> (response, "response is UploadResponse");
        }
        
        /// <summary>
        /// Test UserUserRateOptions
        /// </summary>
        [Test]
        public void UserUserRateOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserUserRateOptions();
            
        }
        
        /// <summary>
        /// Test UserUserRatePost
        /// </summary>
        [Test]
        public void UserUserRatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RatingUpdateRequest ratingUpdateRequest = null;
            //var response = instance.UserUserRatePost(ratingUpdateRequest);
            //Assert.IsInstanceOf<RatingUpdateResponse> (response, "response is RatingUpdateResponse");
        }
        
    }

}
